import{_ as e,W as t,X as p,Y as n,Z as s,a0 as o,a1 as i,C as l}from"./framework-b6a07282.js";const c="/assets/1-f76bb96d.jpg",u={},r={href:"https://requests.readthedocs.io/projects/cn/zh_CN/latest/",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="requests模块的作用" tabindex="-1"><a class="header-anchor" href="#requests模块的作用" aria-hidden="true">#</a> requests模块的作用</h2><ul><li>发送http请求，获取响应数据</li></ul><h2 id="requests模块的安装" tabindex="-1"><a class="header-anchor" href="#requests模块的安装" aria-hidden="true">#</a> requests模块的安装</h2><ul><li>pip install requests</li></ul><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><h3 id="使用requests发送get请求-响应乱码" tabindex="-1"><a class="header-anchor" href="#使用requests发送get请求-响应乱码" aria-hidden="true">#</a> 使用requests发送get请求（响应乱码）</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token string">&#39;https://www.baidu.com&#39;</span>
response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span> <span class="token comment">#发送请求，并将结果存储在response中</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#打印响应内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="response响应对象-解决乱码" tabindex="-1"><a class="header-anchor" href="#response响应对象-解决乱码" aria-hidden="true">#</a> response响应对象（解决乱码）</h3><ul><li>上面的代码运行发现存在许多乱码，这是因为使用的编码解码字符集不同而导致的。我们可以使用下面的方法解决中文乱码问题。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#1.第一种方式</span>
response<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span> <span class="token comment">#设定编码格式为utf-8</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>	<span class="token comment">#由于百度网站的charset=utf-8，所以根据推测出来使用utf-8解码</span>

<span class="token comment">#2.第二种方式</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#默认编码类型为ISO-8859-1，没有指定就使用ISO-8859-1解码了</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>response.text是request模块按照chardet模块推测出的编码字符集进行解码的结果。</li><li>网络传输的字符串都是bytes类型的，所以response.text=response.content.decode(&#39;所推测出的编码字符集&#39;)</li><li>我们可以在网页源码中搜索charset，尝试参考该编码字符集，注意存在不准确的情况。</li></ol><h3 id="response-text和response-content的区别" tabindex="-1"><a class="header-anchor" href="#response-text和response-content的区别" aria-hidden="true">#</a> response.text和response.content的区别</h3><ul><li>response.text <ul><li>类型str</li><li>解码类型：request模块自动根据http头部对应的响应编码作出有根据的推测，推测的文编码。</li></ul></li><li>response.content <ul><li>类型bytes</li><li>解码类型：没有指定（默认为ISO-8859-1）</li></ul></li></ul><h3 id="response对象的常用属性或方法" tabindex="-1"><a class="header-anchor" href="#response对象的常用属性或方法" aria-hidden="true">#</a> response对象的常用属性或方法</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span> <span class="token comment">#响应的url</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span> <span class="token comment">#响应状态码</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token comment">#响应对应的请求头，User-Agent</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">)</span> <span class="token comment">#响应头</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span> <span class="token comment">#取得响应头中设置的cookie</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送带请求头的请求" tabindex="-1"><a class="header-anchor" href="#发送带请求头的请求" aria-hidden="true">#</a> 发送带请求头的请求</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token string">&#39;https://www.baidu.com&#39;</span>
response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>

headers<span class="token operator">=</span><span class="token punctuation">{</span>	<span class="token comment">#设置请求头，UA、cookie都可以设置</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&#39;</span>
<span class="token punctuation">}</span>

response1<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span> <span class="token comment">#发送带请求头的请求</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>response1<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response1<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送带参数的请求" tabindex="-1"><a class="header-anchor" href="#发送带参数的请求" aria-hidden="true">#</a> 发送带参数的请求</h3><ul><li>url地址中会有一个？，那么该问号后边的就是请求参数，又叫做查询字符。</li></ul><h4 id="_1-直接在url中带参数" tabindex="-1"><a class="header-anchor" href="#_1-直接在url中带参数" aria-hidden="true">#</a> 1.直接在url中带参数</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token string">&#39;https://www.baidu.com/s?wd=python&#39;</span>

headers<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&#39;</span>
<span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;baidu.html&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">:</span>
     a<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-通过params携带参数字典" tabindex="-1"><a class="header-anchor" href="#_2-通过params携带参数字典" aria-hidden="true">#</a> 2.通过params携带参数字典</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token string">&#39;https://www.baidu.com/s?&#39;</span>
<span class="token comment">#构建参数字典</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;wd&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;python&#39;</span>
<span class="token punctuation">}</span>

headers<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&#39;</span>
<span class="token punctuation">}</span>

response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>params<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;baidu.html&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">:</span>
     a<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用headers参数发送带cookie的请求" tabindex="-1"><a class="header-anchor" href="#用headers参数发送带cookie的请求" aria-hidden="true">#</a> 用headers参数发送带cookie的请求</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token string">&#39;http://localhost:8085/about.php&#39;</span>
headers<span class="token operator">=</span><span class="token punctuation">{</span>	
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;Cookie&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Idea-b225b9b0=73ff5629-1493-4934-87cd-0ed8ebc7fafa; PHPSESSID=7ndjahvaicn4u0k3cpti0jrsou; security=impossible&#39;</span>
<span class="token punctuation">}</span>

response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span> 
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;dvwa.html&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookies参数的使用" tabindex="-1"><a class="header-anchor" href="#cookies参数的使用" aria-hidden="true">#</a> cookies参数的使用</h3><ul><li>不仅可以通过headers参数中携带cookie，还可以使用专门的cookie参数来携带cookie</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url<span class="token operator">=</span><span class="token string">&#39;http://localhost:8085/about.php&#39;</span>
headers<span class="token operator">=</span><span class="token punctuation">{</span>
    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&#39;</span>
<span class="token punctuation">}</span>
<span class="token comment">#构建cookie字典</span>
temp<span class="token operator">=</span><span class="token string">&#39;PHPSESSID=cntpa0kb42g9pdgb9spkgk152t; security=low&#39;</span>
cookie_list <span class="token operator">=</span> temp<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span>
<span class="token comment">#cookies={cookie.split(&#39;=&#39;)[0]:cookie.split(&#39;=&#39;)[1] for cookie in cookie_list} #使用字典推导式</span>

<span class="token comment">#使用稳妥的方式：</span>
cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">#创建个空字典</span>
<span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookie_list<span class="token punctuation">:</span>	<span class="token comment">#循环cookie_list，并使用&#39;;&#39;分隔。</span>
    cookies<span class="token punctuation">[</span>cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> cookie<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#向字典中添加数据</span>

response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;dvwa.html&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> a<span class="token punctuation">:</span>
    a<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="cookiejar对象转换为cookie字典的方法" tabindex="-1"><a class="header-anchor" href="#cookiejar对象转换为cookie字典的方法" aria-hidden="true">#</a> cookieJar对象转换为cookie字典的方法</h3><ul><li>使用request获取的response对象，具有cookies属性。该值是一个cookieJar类型，包含了对方服务器放置在本地的cookie。我们如何将其转为cookies字典呢？</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">&#39;https://www.baidu.com/&#39;</span>
response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>

dict_cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>dict_cookies<span class="token punctuation">)</span>

jar_cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>dict_cookies<span class="token punctuation">)</span> <span class="token comment">#转换后丢失了域名</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>jar_cookies<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="超时参数timeout的使用" tabindex="-1"><a class="header-anchor" href="#超时参数timeout的使用" aria-hidden="true">#</a> 超时参数timeout的使用</h3><ul><li>如果遇到网络波动，一个请求等了很久都没有结果，导致程序一直在挂着执行。严重影响效率。所以我们需要对请求进行强制要求，如果规定的时间内没有返回结果则报错。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

url<span class="token operator">=</span><span class="token string">&#39;https://twitter.com&#39;</span>
startime<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startime<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理的使用" tabindex="-1"><a class="header-anchor" href="#代理的使用" aria-hidden="true">#</a> 代理的使用</h3><ul><li><p>正向代理与反向代理的区别：知不知道最终服务器的地址作为判断标准。知道就是正向。不知道就是反向代理。</p></li><li><p>1.代理IP（代理服务器）的分类</p><ul><li><p>透明代理（Transparent Proxy）：透明代理虽然可以直接“隐藏”你的ip地址，但还是可以查到你是谁。目标服务器接收到的请求头如下：</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>REMOTE_ADDR=Proxy IP
HTTP_VIA=Proxy IP
HTTP_X_FORWARDED_FOR=YourIP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>匿名代理（Anonymous Proxy）：使用匿名代理，别人只能知道你用了代理，无法知道你是谁。目标服务器接收到的请求头如下：</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>REMOTE_ADDR=Proxy IP
HTTP_VIA=Proxy IP
HTTP_X_FORWARDED_FOR=Proxy IP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>高匿代理（Elite proxy或High Anonymity Proxy）：高匿代理让别根本无法发现你是在用代理，所以是最好的选择。目标服务器接收到的请头如下：</p><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>REMOTE_ADDR=Proxy IP
HTTP_VIA=not determined
HTTP_X_FORWARDED_FOR=not determined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>2.根据网站所使用的协议不同，需要使用相应协议的代理服务。从代理服务请求使用的协议可以分为：</p><ul><li>http代理：目标url为http协议</li><li>https代理：目标url为https协议</li><li>socks隧道代理（如socks5代理）等： <ul><li>socks代理只是简单地传递数据包，不关系是何种应用协议（FTP、HTTP个HTTPS等）</li><li>socks代理比http、https代理耗时时间少</li><li>socks代理可以转发http和https地请求</li></ul></li></ul></li></ul><h4 id="proxies代理参数地使用" tabindex="-1"><a class="header-anchor" href="#proxies代理参数地使用" aria-hidden="true">#</a> proxies代理参数地使用</h4><ul><li><p>为了让服务器以为不是同一个客户端在请求，为了防止频繁向一个域名发送请求被封ip。所以我们需要使用代理ip。</p></li><li><p>proxies的形式：字典</p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">&#39;https://www.baidu.com/&#39;</span>
proxies<span class="token operator">=</span><span class="token punctuation">{</span>	<span class="token comment">#代理ip池</span>
    <span class="token string">&#39;http&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;http://117.114.149.66:55443&#39;</span><span class="token punctuation">,</span>
    <span class="token string">&#39;http&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;http://112.14.47.6:52024&#39;</span>
<span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代理使用成功不会有任何报错，能成功获取响应。</p><p>代理使用失败则卡滞，要么报错。</p><h3 id="使用verify参数忽略ca证书" tabindex="-1"><a class="header-anchor" href="#使用verify参数忽略ca证书" aria-hidden="true">#</a> 使用verify参数忽略CA证书</h3><ul><li>在使用浏览器上网的时候，有时候能看到下面的提示。导致我们的代码无法正常访问。</li></ul><img src="`+c+`"><ul><li>为了解决这个问题，我们通过使用verify-False参数。此时requests模块发送请求就不做CA证书的验证：verify参数能够忽略CA证书的认证</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">&#39;https://localhost:3443/#/login&#39;</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用requests发送post请求" tabindex="-1"><a class="header-anchor" href="#使用requests发送post请求" aria-hidden="true">#</a> 使用requests发送post请求</h3><ul><li><code>response=requests.post(url,data)</code></li><li>data参数接收的是一个字典</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">&#39;http://localhost:9002/01receive_data.php&#39;</span>
data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;test2&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;小明&#39;</span>
<span class="token punctuation">}</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="post数据来源" tabindex="-1"><a class="header-anchor" href="#post数据来源" aria-hidden="true">#</a> POST数据来源</h4><ol><li>固定值：抓包比较不变值</li><li>输入值：抓包根据自己输入值是否相同</li><li>预设值-静态文件（如token）：需要从静态html中获取</li><li>预设值-发请求：需要对指定地址发送请求获取数据</li><li>在客户端生成的：分析js，模拟生成数据</li></ol><h3 id="使用requests-session进行状态保持" tabindex="-1"><a class="header-anchor" href="#使用requests-session进行状态保持" aria-hidden="true">#</a> 使用requests.session进行状态保持</h3><ul><li><p>requests模块中的session类能够自动处理发送请求获取响应过程中产生的cookie，进而达到状态保持的目的。</p></li><li><p>作用：自动处理cookie，即下一次请求会带上前一次的cookie</p></li><li><p>应用场景：连续多次请求过程中产生的cookie</p></li></ul><p>session实例在请求了一个网站后，对方服务器设置在本地的cookie会保存在session中，下一次再使用session请求对方服务器的时候，会带上上一次的cookie。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session <span class="token comment">#实例化session对象</span>
response<span class="token operator">=</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
response<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>session对象发送get或post的请求参数与requests模块发送请求的参数完全一致</li></ul>`,56);function k(v,m){const a=l("ExternalLinkIcon");return t(),p("div",null,[n("p",null,[s("官网文档："),n("a",r,[s("Requests: 让 HTTP 服务人类 — Requests 2.18.1 文档"),o(a)])]),d])}const b=e(u,[["render",k],["__file","Python-requests模块.html.vue"]]);export{b as default};
